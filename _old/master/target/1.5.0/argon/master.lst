
g:/projects/led3d/src/embedded/master/target/1.5.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a34  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6a50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20035b70  000d6a54  00015b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00008c18  20035bd8  20035bd8  00025bd8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6abc  000d6abc  00016abc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6ae4  000d6ae4  00016ae4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d1b33  00000000  00000000  00016ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e8ad  00000000  00000000  000e861b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ba8d  00000000  00000000  000f6ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022d8  00000000  00000000  00112955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000045f0  00000000  00000000  00114c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032e8c  00000000  00000000  0011921d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000220f7  00000000  00000000  0014c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001125c0  00000000  00000000  0016e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c4ec  00000000  00000000  00280760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f8fd 	bl	d622c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f902 	bl	d6242 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	20035b70 	.word	0x20035b70
   d4048:	000d6a54 	.word	0x000d6a54
   d404c:	20035bd8 	.word	0x20035bd8
   d4050:	20035bd8 	.word	0x20035bd8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f931 	bl	d52c0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6a48 	.word	0x000d6a48
   d4080:	000d6a0c 	.word	0x000d6a0c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b900 	b.w	d4288 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9bf 	bl	d440c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b8d7 	b.w	d5244 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbfb 	b.w	d4890 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bbf9 	b.w	d4890 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bbff 	b.w	d48a0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bbfd 	b.w	d48a0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN12PacketReader7readUDPER3UDPR10VoxelModelm.isra.14.constprop.48>:
  int numBytesInDataAllPacket(const VoxelModel& voxelModel) const { 
    return 5 + this->numBytesInDataAllBody(voxelModel); 
  };
};

inline bool PacketReader::readUDP(UDP& udp, VoxelModel& voxelModel, unsigned long dtMicroSecs) {
   d40b8:	b570      	push	{r4, r5, r6, lr}
   d40ba:	460c      	mov	r4, r1
   d40bc:	4606      	mov	r6, r0
  int packetSize = udp.parsePacket();
   d40be:	2100      	movs	r1, #0
   d40c0:	4620      	mov	r0, r4
   d40c2:	f000 ff70 	bl	d4fa6 <_ZN3UDP11parsePacketEm>
  if (packetSize > 0) {
   d40c6:	1e05      	subs	r5, r0, #0
   d40c8:	dd0c      	ble.n	d40e4 <_ZN12PacketReader7readUDPER3UDPR10VoxelModelm.isra.14.constprop.48+0x2c>
    Serial.printlnf("UDP Packet Size: %i", packetSize);
   d40ca:	f001 fa1d 	bl	d5508 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40ce:	4a06      	ldr	r2, [pc, #24]	; (d40e8 <_ZN12PacketReader7readUDPER3UDPR10VoxelModelm.isra.14.constprop.48+0x30>)
   d40d0:	2101      	movs	r1, #1
   d40d2:	462b      	mov	r3, r5
   d40d4:	f001 f82d 	bl	d5132 <_ZN5Print11printf_implEbPKcz>
    udp.read(this->buffer, packetSize);
   d40d8:	462a      	mov	r2, r5
   d40da:	f106 011c 	add.w	r1, r6, #28
   d40de:	4620      	mov	r0, r4
   d40e0:	f000 fd18 	bl	d4b14 <_ZN3UDP4readEPhj>
  }
  return true;
}
   d40e4:	2001      	movs	r0, #1
   d40e6:	bd70      	pop	{r4, r5, r6, pc}
   d40e8:	000d62c8 	.word	0x000d62c8

000d40ec <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40ec:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ee:	6984      	ldr	r4, [r0, #24]
   d40f0:	4b0a      	ldr	r3, [pc, #40]	; (d411c <_ZN9TCPClientD1Ev+0x30>)
   d40f2:	6003      	str	r3, [r0, #0]
   d40f4:	4605      	mov	r5, r0
   d40f6:	b17c      	cbz	r4, d4118 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40f8:	6863      	ldr	r3, [r4, #4]
   d40fa:	3b01      	subs	r3, #1
   d40fc:	6063      	str	r3, [r4, #4]
   d40fe:	b95b      	cbnz	r3, d4118 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4100:	6823      	ldr	r3, [r4, #0]
   d4102:	4620      	mov	r0, r4
   d4104:	689b      	ldr	r3, [r3, #8]
   d4106:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4108:	68a3      	ldr	r3, [r4, #8]
   d410a:	3b01      	subs	r3, #1
   d410c:	60a3      	str	r3, [r4, #8]
   d410e:	b91b      	cbnz	r3, d4118 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4110:	6823      	ldr	r3, [r4, #0]
   d4112:	4620      	mov	r0, r4
   d4114:	68db      	ldr	r3, [r3, #12]
   d4116:	4798      	blx	r3
   d4118:	4628      	mov	r0, r5
   d411a:	bd38      	pop	{r3, r4, r5, pc}
   d411c:	000d68e4 	.word	0x000d68e4

000d4120 <_ZN9TCPClientD0Ev>:
   d4120:	b510      	push	{r4, lr}
   d4122:	4604      	mov	r4, r0
   d4124:	f7ff ffe2 	bl	d40ec <_ZN9TCPClientD1Ev>
   d4128:	4620      	mov	r0, r4
   d412a:	211c      	movs	r1, #28
   d412c:	f001 ff25 	bl	d5f7a <_ZdlPvj>
   d4130:	4620      	mov	r0, r4
   d4132:	bd10      	pop	{r4, pc}

000d4134 <_ZN12PacketReader10resetStateERK10VoxelModel>:

inline void PacketReader::setState(PacketReader::ReaderState nextState, const VoxelModel& voxelModel) {
  switch (nextState) {

    case PacketReader::READING_HEADER:
      this->currPacketTypeByte    = '0';
   d4134:	2330      	movs	r3, #48	; 0x30
   d4136:	7143      	strb	r3, [r0, #5]
      this->currSubPacketTypeByte = '0';
   d4138:	7183      	strb	r3, [r0, #6]
      this->currExpectedBytes     = 1;
   d413a:	2301      	movs	r3, #1
   d413c:	6083      	str	r3, [r0, #8]
      this->currByteCount         = 0;
   d413e:	2300      	movs	r3, #0
   d4140:	60c3      	str	r3, [r0, #12]
      this->readTimeMs            = 0;
   d4142:	6183      	str	r3, [r0, #24]
      Serial.println("Attempting to set an invalid PacketReader state.");
      this->resetState(voxelModel);
      return;
  }

  this->state = nextState;
   d4144:	7103      	strb	r3, [r0, #4]
   d4146:	4770      	bx	lr

000d4148 <_ZN12MasterClientC1ER10VoxelModelR13PacketSerial_I4COBSLh0ELj16384EE>:
#include "MasterClient.h"
#include "VoxelModel.h"

#define TIME_BETWEEN_DISCOVERY_PACKETS_MICROSECS 1000000

MasterClient:: MasterClient(VoxelModel& voxelModel, led3d::LED3DPacketSerial& slaveSerial) :
   d4148:	b537      	push	{r0, r1, r2, r4, r5, lr}
#define ALL_VOXELS_BUFFER_SIZE (3 + VOXEL_MODULE_X_SIZE * VOXEL_MODULE_Z_SIZE * MAX_VOXEL_Y_SIZE * 3)

class SlavePacketWriter {
  public:
    SlavePacketWriter(led3d::LED3DPacketSerial& slaveSerial): slaveSerial(slaveSerial), 
    hasInitReady(false), hasClearReady(false), hasAllVoxelsReady(false) {};
   d414a:	2500      	movs	r5, #0
   d414c:	4604      	mov	r4, r0
   d414e:	e880 0006 	stmia.w	r0, {r1, r2}
   d4152:	7205      	strb	r5, [r0, #8]
   d4154:	7245      	strb	r5, [r0, #9]
   d4156:	7285      	strb	r5, [r0, #10]
    READING_END
  };

public:
  PacketReader(const VoxelModel& voxelModel, SlavePacketWriter& slavePacketWriter) : 
    slavePacketWriter(slavePacketWriter) { this->resetState(voxelModel); };
   d4158:	f641 0018 	movw	r0, #6168	; 0x1818
  slavePacketWriter(slaveSerial),
  packetReader(voxelModel, slavePacketWriter),
  state(DISCOVERING),
  discoveryIP(MULTICAST_DISCOVERY_ADDR0, MULTICAST_DISCOVERY_ADDR1, MULTICAST_DISCOVERY_ADDR2, MULTICAST_DISCOVERY_ADDR3),
  dataIP(MULTICAST_DATA_ADDR0, MULTICAST_DATA_ADDR1, MULTICAST_DATA_ADDR2, MULTICAST_DATA_ADDR3),
  discoveryPacketTimerMicroSecs(TIME_BETWEEN_DISCOVERY_PACKETS_MICROSECS) {
   d415c:	1d23      	adds	r3, r4, #4
   d415e:	5023      	str	r3, [r4, r0]
   d4160:	4420      	add	r0, r4
   d4162:	f7ff ffe7 	bl	d4134 <_ZN12PacketReader10resetStateERK10VoxelModel>
   d4166:	f644 0334 	movw	r3, #18484	; 0x4834
   d416a:	f504 4090 	add.w	r0, r4, #18432	; 0x4800
   d416e:	54e5      	strb	r5, [r4, r3]
   d4170:	3038      	adds	r0, #56	; 0x38
   d4172:	f000 feb7 	bl	d4ee4 <_ZN3UDPC1Ev>
   d4176:	f504 4091 	add.w	r0, r4, #18560	; 0x4880
   d417a:	3004      	adds	r0, #4
   d417c:	f001 fdf8 	bl	d5d70 <_ZN9TCPClientC1Ev>
   d4180:	25ff      	movs	r5, #255	; 0xff
   d4182:	f504 4091 	add.w	r0, r4, #18560	; 0x4880
   d4186:	462b      	mov	r3, r5
   d4188:	462a      	mov	r2, r5
   d418a:	9500      	str	r5, [sp, #0]
   d418c:	21e9      	movs	r1, #233	; 0xe9
   d418e:	3020      	adds	r0, #32
   d4190:	f001 f940 	bl	d5414 <_ZN9IPAddressC1Ehhhh>
   d4194:	f504 4091 	add.w	r0, r4, #18560	; 0x4880
   d4198:	462b      	mov	r3, r5
   d419a:	462a      	mov	r2, r5
   d419c:	21ea      	movs	r1, #234	; 0xea
   d419e:	9500      	str	r5, [sp, #0]
   d41a0:	3038      	adds	r0, #56	; 0x38
   d41a2:	f001 f937 	bl	d5414 <_ZN9IPAddressC1Ehhhh>
   d41a6:	f504 4091 	add.w	r0, r4, #18560	; 0x4880
   d41aa:	3050      	adds	r0, #80	; 0x50
   d41ac:	f001 f8ee 	bl	d538c <_ZN9IPAddressC1Ev>
   d41b0:	4a03      	ldr	r2, [pc, #12]	; (d41c0 <_ZN12MasterClientC1ER10VoxelModelR13PacketSerial_I4COBSLh0ELj16384EE+0x78>)
   d41b2:	f644 03ec 	movw	r3, #18668	; 0x48ec
}
   d41b6:	4620      	mov	r0, r4
  slavePacketWriter(slaveSerial),
  packetReader(voxelModel, slavePacketWriter),
  state(DISCOVERING),
  discoveryIP(MULTICAST_DISCOVERY_ADDR0, MULTICAST_DISCOVERY_ADDR1, MULTICAST_DISCOVERY_ADDR2, MULTICAST_DISCOVERY_ADDR3),
  dataIP(MULTICAST_DATA_ADDR0, MULTICAST_DATA_ADDR1, MULTICAST_DATA_ADDR2, MULTICAST_DATA_ADDR3),
  discoveryPacketTimerMicroSecs(TIME_BETWEEN_DISCOVERY_PACKETS_MICROSECS) {
   d41b8:	50e2      	str	r2, [r4, r3]
}
   d41ba:	b003      	add	sp, #12
   d41bc:	bd30      	pop	{r4, r5, pc}
   d41be:	bf00      	nop
   d41c0:	000f4240 	.word	0x000f4240

000d41c4 <_ZN12MasterClientD1Ev>:

MasterClient::~MasterClient() {
   d41c4:	b538      	push	{r3, r4, r5, lr}
   d41c6:	4604      	mov	r4, r0
   d41c8:	f500 4091 	add.w	r0, r0, #18560	; 0x4880
   d41cc:	3004      	adds	r0, #4
   d41ce:	f7ff ff8d 	bl	d40ec <_ZN9TCPClientD1Ev>
   d41d2:	f644 0238 	movw	r2, #18488	; 0x4838



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d41d6:	4b06      	ldr	r3, [pc, #24]	; (d41f0 <_ZN12MasterClientD1Ev+0x2c>)
   d41d8:	50a3      	str	r3, [r4, r2]
   d41da:	18a5      	adds	r5, r4, r2
   d41dc:	3364      	adds	r3, #100	; 0x64
   d41de:	612b      	str	r3, [r5, #16]
   d41e0:	4628      	mov	r0, r5
   d41e2:	f000 fc74 	bl	d4ace <_ZN3UDP4stopEv>
   d41e6:	4628      	mov	r0, r5
   d41e8:	f000 fe9a 	bl	d4f20 <_ZN3UDP13releaseBufferEv>
}
   d41ec:	4620      	mov	r0, r4
   d41ee:	bd38      	pop	{r3, r4, r5, pc}
   d41f0:	000d66ac 	.word	0x000d66ac

000d41f4 <_ZN12MasterClient5beginEv>:

void MasterClient::begin() {
   d41f4:	b538      	push	{r3, r4, r5, lr}
  this->state = DISCOVERING;
   d41f6:	f644 0334 	movw	r3, #18484	; 0x4834

  //this->udp.begin(UDP_DISCOVERY_PORT);
  //this->udp.joinMulticast(this->discoveryIP);

  this->udp.begin(UDP_DATA_PORT);
   d41fa:	f500 4490 	add.w	r4, r0, #18432	; 0x4800
   d41fe:	3438      	adds	r4, #56	; 0x38

MasterClient::~MasterClient() {
}

void MasterClient::begin() {
  this->state = DISCOVERING;
   d4200:	2200      	movs	r2, #0
}

MasterClient::~MasterClient() {
}

void MasterClient::begin() {
   d4202:	4605      	mov	r5, r0
  this->state = DISCOVERING;
   d4204:	54c2      	strb	r2, [r0, r3]

  //this->udp.begin(UDP_DISCOVERY_PORT);
  //this->udp.joinMulticast(this->discoveryIP);

  this->udp.begin(UDP_DATA_PORT);
   d4206:	f644 6122 	movw	r1, #20002	; 0x4e22
   d420a:	4620      	mov	r0, r4
   d420c:	f000 fc11 	bl	d4a32 <_ZN3UDP5beginEtm>
  this->udp.joinMulticast(this->dataIP);
   d4210:	f505 4191 	add.w	r1, r5, #18560	; 0x4880
   d4214:	4620      	mov	r0, r4
   d4216:	3138      	adds	r1, #56	; 0x38
}
   d4218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  //this->udp.begin(UDP_DISCOVERY_PORT);
  //this->udp.joinMulticast(this->discoveryIP);

  this->udp.begin(UDP_DATA_PORT);
  this->udp.joinMulticast(this->dataIP);
   d421c:	f000 befe 	b.w	d501c <_ZN3UDP13joinMulticastERK9IPAddress>

000d4220 <_ZN12MasterClient3runEm>:
}

void MasterClient::run(unsigned long dtMicroSecs) {
  
  if (!this->packetReader.readUDP(this->udp, this->voxelModel, dtMicroSecs)) {
   d4220:	f500 4190 	add.w	r1, r0, #18432	; 0x4800
   d4224:	f500 50c0 	add.w	r0, r0, #6144	; 0x1800

  this->udp.begin(UDP_DATA_PORT);
  this->udp.joinMulticast(this->dataIP);
}

void MasterClient::run(unsigned long dtMicroSecs) {
   d4228:	b508      	push	{r3, lr}
  
  if (!this->packetReader.readUDP(this->udp, this->voxelModel, dtMicroSecs)) {
   d422a:	3138      	adds	r1, #56	; 0x38
   d422c:	3018      	adds	r0, #24
   d422e:	f7ff ff43 	bl	d40b8 <_ZN12PacketReader7readUDPER3UDPR10VoxelModelm.isra.14.constprop.48>
   d4232:	b930      	cbnz	r0, d4242 <_ZN12MasterClient3runEm+0x22>
    Serial.print("Error while reading UDP packet.");
   d4234:	f001 f968 	bl	d5508 <_Z16_fetch_usbserialv>
   d4238:	4902      	ldr	r1, [pc, #8]	; (d4244 <_ZN12MasterClient3runEm+0x24>)
    default:
      this->state = MasterClient::DISCOVERING;
      break;
  }
  */
}
   d423a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void MasterClient::run(unsigned long dtMicroSecs) {
  
  if (!this->packetReader.readUDP(this->udp, this->voxelModel, dtMicroSecs)) {
    Serial.print("Error while reading UDP packet.");
   d423e:	f000 bf3b 	b.w	d50b8 <_ZN5Print5printEPKc>
   d4242:	bd08      	pop	{r3, pc}
   d4244:	000d62dc 	.word	0x000d62dc

000d4248 <_GLOBAL__sub_I__ZN12MasterClientC2ER10VoxelModelR13PacketSerial_I4COBSLh0ELj16384EE>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4248:	f000 b956 	b.w	d44f8 <HAL_Pin_Map>

000d424c <_ZN13PacketSerial_I4COBSLh0ELj16384EED1Ev>:
    }

    /// \brief Destroy the PacketSerial_ device.
    ~PacketSerial_()
    {
    }
   d424c:	4770      	bx	lr
	...

000d4250 <_Z22onSerialPacketReceivedPKhj>:
led3d::LED3DPacketSerial slaveSerial;
VoxelModel voxelModel;
MasterClient client(voxelModel, slaveSerial);

// Recieve incoming serial packets from slave(s)
void onSerialPacketReceived(const uint8_t* buffer, size_t size) {
   d4250:	b508      	push	{r3, lr}
  Serial.println("Packet recieved on master.");
   d4252:	f001 f959 	bl	d5508 <_Z16_fetch_usbserialv>
   d4256:	4902      	ldr	r1, [pc, #8]	; (d4260 <_Z22onSerialPacketReceivedPKhj+0x10>)
}
   d4258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
VoxelModel voxelModel;
MasterClient client(voxelModel, slaveSerial);

// Recieve incoming serial packets from slave(s)
void onSerialPacketReceived(const uint8_t* buffer, size_t size) {
  Serial.println("Packet recieved on master.");
   d425c:	f000 bf3f 	b.w	d50de <_ZN5Print7printlnEPKc>
   d4260:	000d6654 	.word	0x000d6654

000d4264 <_ZN10VoxelModelD1Ev>:
#include <vector>

typedef std::vector<uint8_t> FlatVoxelVec; // This is stored as a flat array of voxels in x,y,z,(r,g,b) ordering (it should be readable by a for loop in that order)
typedef std::vector<FlatVoxelVec> VoxelModuleVec;

class VoxelModel {
   d4264:	b570      	push	{r4, r5, r6, lr}
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d4266:	6845      	ldr	r5, [r0, #4]
   d4268:	6886      	ldr	r6, [r0, #8]
   d426a:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d426c:	42ae      	cmp	r6, r5
   d426e:	d005      	beq.n	d427c <_ZN10VoxelModelD1Ev+0x18>
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d4270:	6828      	ldr	r0, [r5, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4272:	b108      	cbz	r0, d4278 <_ZN10VoxelModelD1Ev+0x14>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4274:	f7ff ff13 	bl	d409e <_ZdlPv>
   d4278:	350c      	adds	r5, #12
   d427a:	e7f7      	b.n	d426c <_ZN10VoxelModelD1Ev+0x8>
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d427c:	6860      	ldr	r0, [r4, #4]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d427e:	b108      	cbz	r0, d4284 <_ZN10VoxelModelD1Ev+0x20>
   d4280:	f7ff ff0d 	bl	d409e <_ZdlPv>
   d4284:	4620      	mov	r0, r4
   d4286:	bd70      	pop	{r4, r5, r6, pc}

000d4288 <setup>:
}

void setup() {
   d4288:	b508      	push	{r3, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d428a:	f000 faf1 	bl	d4870 <spark_cloud_flag_connect>
  #endif

  //Particle.disconnect();
  Particle.connect();

  Serial.begin(9600); // USB Serial
   d428e:	f001 f93b 	bl	d5508 <_Z16_fetch_usbserialv>
   d4292:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4296:	f001 f92b 	bl	d54f0 <_ZN9USBSerial5beginEl>

  Serial1.begin(PACKET_SERIAL_BAUD);
   d429a:	f001 f9bb 	bl	d5614 <_Z22__fetch_global_Serial1v>
   d429e:	490b      	ldr	r1, [pc, #44]	; (d42cc <setup+0x44>)
   d42a0:	f001 f9b4 	bl	d560c <_ZN11USARTSerial5beginEm>
  slaveSerial.setStream(&Serial1);
   d42a4:	f001 f9b6 	bl	d5614 <_Z22__fetch_global_Serial1v>
    /// includes some network objects.
    ///
    /// \param stream A pointer to an Arduino `Stream`.
    void setStream(Stream* stream)
    {
        _stream = stream;
   d42a8:	4b09      	ldr	r3, [pc, #36]	; (d42d0 <setup+0x48>)
    /// Setting a packet handler will remove all other packet handlers.
    ///
    /// \param onPacketFunction A pointer to the packet handler function.
    void setPacketHandler(PacketHandlerFunction onPacketFunction)
    {
        _onPacketFunction = onPacketFunction;
   d42aa:	490a      	ldr	r1, [pc, #40]	; (d42d4 <setup+0x4c>)
    /// includes some network objects.
    ///
    /// \param stream A pointer to an Arduino `Stream`.
    void setStream(Stream* stream)
    {
        _stream = stream;
   d42ac:	f244 0208 	movw	r2, #16392	; 0x4008
   d42b0:	5098      	str	r0, [r3, r2]
    /// Setting a packet handler will remove all other packet handlers.
    ///
    /// \param onPacketFunction A pointer to the packet handler function.
    void setPacketHandler(PacketHandlerFunction onPacketFunction)
    {
        _onPacketFunction = onPacketFunction;
   d42b2:	f244 020c 	movw	r2, #16396	; 0x400c
  slaveSerial.setPacketHandler(&onSerialPacketReceived);

  // Setup the client - whenever it connects to the network it tries to discover the server, it has a state
  // machine that will listen for the appropriate data and take actions based on that
  client.begin();
   d42b6:	4808      	ldr	r0, [pc, #32]	; (d42d8 <setup+0x50>)
   d42b8:	5099      	str	r1, [r3, r2]
        _onPacketFunctionWithSender = nullptr;
   d42ba:	f244 0210 	movw	r2, #16400	; 0x4010
   d42be:	2100      	movs	r1, #0
   d42c0:	5099      	str	r1, [r3, r2]
}
   d42c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  slaveSerial.setStream(&Serial1);
  slaveSerial.setPacketHandler(&onSerialPacketReceived);

  // Setup the client - whenever it connects to the network it tries to discover the server, it has a state
  // machine that will listen for the appropriate data and take actions based on that
  client.begin();
   d42c6:	f7ff bf95 	b.w	d41f4 <_ZN12MasterClient5beginEv>
   d42ca:	bf00      	nop
   d42cc:	000f4240 	.word	0x000f4240
   d42d0:	2003a4e0 	.word	0x2003a4e0
   d42d4:	000d4251 	.word	0x000d4251
   d42d8:	20035bec 	.word	0x20035bec

000d42dc <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv>:
    ///         // Other program code.
    ///
    ///         myPacketSerial.update();
    ///     }
    ///
    void update()
   d42dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
        if (_stream == nullptr) return;
   d42e0:	f244 0308 	movw	r3, #16392	; 0x4008
    ///         // Other program code.
    ///
    ///         myPacketSerial.update();
    ///     }
    ///
    void update()
   d42e4:	b087      	sub	sp, #28
    {
        if (_stream == nullptr) return;
   d42e6:	58c3      	ldr	r3, [r0, r3]
    ///         // Other program code.
    ///
    ///         myPacketSerial.update();
    ///     }
    ///
    void update()
   d42e8:	af00      	add	r7, sp, #0
   d42ea:	4604      	mov	r4, r0
    {
        if (_stream == nullptr) return;
   d42ec:	2b00      	cmp	r3, #0
   d42ee:	f000 8089 	beq.w	d4404 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x128>

        while (_stream->available() > 0)
   d42f2:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
   d42f6:	3308      	adds	r3, #8
   d42f8:	f500 4580 	add.w	r5, r0, #16384	; 0x4000
        {
            uint8_t data = _stream->read();

            if (data == PacketMarker)
            {
                if (_onPacketFunction || _onPacketFunctionWithSender)
   d42fc:	f500 4880 	add.w	r8, r0, #16384	; 0x4000
    ///
    void update()
    {
        if (_stream == nullptr) return;

        while (_stream->available() > 0)
   d4300:	617b      	str	r3, [r7, #20]
   d4302:	3504      	adds	r5, #4
        {
            uint8_t data = _stream->read();

            if (data == PacketMarker)
            {
                if (_onPacketFunction || _onPacketFunctionWithSender)
   d4304:	f108 080c 	add.w	r8, r8, #12
    ///
    void update()
    {
        if (_stream == nullptr) return;

        while (_stream->available() > 0)
   d4308:	697b      	ldr	r3, [r7, #20]
   d430a:	6818      	ldr	r0, [r3, #0]
   d430c:	6803      	ldr	r3, [r0, #0]
   d430e:	691b      	ldr	r3, [r3, #16]
   d4310:	4798      	blx	r3
   d4312:	2800      	cmp	r0, #0
   d4314:	dd76      	ble.n	d4404 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x128>
        {
            uint8_t data = _stream->read();
   d4316:	697b      	ldr	r3, [r7, #20]
   d4318:	6818      	ldr	r0, [r3, #0]
   d431a:	6803      	ldr	r3, [r0, #0]
   d431c:	695b      	ldr	r3, [r3, #20]
   d431e:	4798      	blx	r3
   d4320:	b2c0      	uxtb	r0, r0

            if (data == PacketMarker)
   d4322:	2800      	cmp	r0, #0
   d4324:	d162      	bne.n	d43ec <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x110>
            {
                if (_onPacketFunction || _onPacketFunctionWithSender)
   d4326:	f8d8 9000 	ldr.w	r9, [r8]
   d432a:	f1b9 0f00 	cmp.w	r9, #0
   d432e:	d105      	bne.n	d433c <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x60>
   d4330:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
   d4334:	3310      	adds	r3, #16
   d4336:	681b      	ldr	r3, [r3, #0]
   d4338:	2b00      	cmp	r3, #0
   d433a:	d054      	beq.n	d43e6 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x10a>
                {
                    uint8_t _decodeBuffer[_receiveBufferIndex];
   d433c:	6828      	ldr	r0, [r5, #0]
                        _onPacketFunction(_decodeBuffer, numDecoded);
                    }
                    else if (_onPacketFunctionWithSender)
                    {
                        _onPacketFunctionWithSender(this, _decodeBuffer, numDecoded);
                    }
   d433e:	f8c7 d004 	str.w	sp, [r7, #4]

            if (data == PacketMarker)
            {
                if (_onPacketFunction || _onPacketFunctionWithSender)
                {
                    uint8_t _decodeBuffer[_receiveBufferIndex];
   d4342:	1dc3      	adds	r3, r0, #7
   d4344:	f023 0307 	bic.w	r3, r3, #7
   d4348:	ebad 0d03 	sub.w	sp, sp, r3
   d434c:	46ee      	mov	lr, sp
    /// \warning decodedBuffer must have a minimum capacity of size.
    static size_t decode(const uint8_t* encodedBuffer,
                         size_t size,
                         uint8_t* decodedBuffer)
    {
        if (size == 0)
   d434e:	2800      	cmp	r0, #0
   d4350:	d037      	beq.n	d43c2 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xe6>

                    size_t numDecoded = EncoderType::decode(_receiveBuffer,
   d4352:	1c63      	adds	r3, r4, #1
   d4354:	2200      	movs	r2, #0
   d4356:	613b      	str	r3, [r7, #16]
   d4358:	4613      	mov	r3, r2
        size_t read_index  = 0;
        size_t write_index = 0;
        uint8_t code       = 0;
        uint8_t i          = 0;

        while (read_index < size)
   d435a:	4298      	cmp	r0, r3
   d435c:	d932      	bls.n	d43c4 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xe8>
        {
            code = encodedBuffer[read_index];
   d435e:	693e      	ldr	r6, [r7, #16]
   d4360:	6939      	ldr	r1, [r7, #16]
   d4362:	f816 c003 	ldrb.w	ip, [r6, r3]

            if (read_index + code > size && code != 1)
   d4366:	eb0c 0a03 	add.w	sl, ip, r3
   d436a:	4550      	cmp	r0, sl
        uint8_t code       = 0;
        uint8_t i          = 0;

        while (read_index < size)
        {
            code = encodedBuffer[read_index];
   d436c:	4419      	add	r1, r3

            if (read_index + code > size && code != 1)
   d436e:	d202      	bcs.n	d4376 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x9a>
   d4370:	f1bc 0f01 	cmp.w	ip, #1
   d4374:	d125      	bne.n	d43c2 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xe6>
   d4376:	60f9      	str	r1, [r7, #12]
   d4378:	eb0e 0102 	add.w	r1, lr, r2
   d437c:	60b9      	str	r1, [r7, #8]
            {
                return 0;
            }

            read_index++;
   d437e:	3301      	adds	r3, #1
   d4380:	4611      	mov	r1, r2
   d4382:	f101 0a01 	add.w	sl, r1, #1

            for (i = 1; i < code; i++)
   d4386:	ebc2 0b0a 	rsb	fp, r2, sl
   d438a:	fa5f fb8b 	uxtb.w	fp, fp
   d438e:	45dc      	cmp	ip, fp
   d4390:	d90a      	bls.n	d43a8 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xcc>
            {
                decodedBuffer[write_index++] = encodedBuffer[read_index++];
   d4392:	68fe      	ldr	r6, [r7, #12]
   d4394:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   d4398:	60fe      	str	r6, [r7, #12]
   d439a:	68be      	ldr	r6, [r7, #8]
   d439c:	f806 1b01 	strb.w	r1, [r6], #1
   d43a0:	3301      	adds	r3, #1
   d43a2:	60be      	str	r6, [r7, #8]
   d43a4:	4651      	mov	r1, sl
   d43a6:	e7ec      	b.n	d4382 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xa6>
            }

            if (code != 0xFF && read_index != size)
   d43a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   d43ac:	d101      	bne.n	d43b2 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xd6>
   d43ae:	460a      	mov	r2, r1
   d43b0:	e7d3      	b.n	d435a <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x7e>
   d43b2:	4298      	cmp	r0, r3
   d43b4:	d0fb      	beq.n	d43ae <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xd2>
            {
                decodedBuffer[write_index++] = '\0';
   d43b6:	f04f 0200 	mov.w	r2, #0
   d43ba:	f80e 2001 	strb.w	r2, [lr, r1]
   d43be:	4651      	mov	r1, sl
   d43c0:	e7f5      	b.n	d43ae <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xd2>
    static size_t decode(const uint8_t* encodedBuffer,
                         size_t size,
                         uint8_t* decodedBuffer)
    {
        if (size == 0)
            return 0;
   d43c2:	2200      	movs	r2, #0
                                                            _receiveBufferIndex,
                                                            _decodeBuffer);

                    if (_onPacketFunction)
   d43c4:	f1b9 0f00 	cmp.w	r9, #0
   d43c8:	d003      	beq.n	d43d2 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0xf6>
                    {
                        _onPacketFunction(_decodeBuffer, numDecoded);
   d43ca:	4611      	mov	r1, r2
   d43cc:	4670      	mov	r0, lr
   d43ce:	47c8      	blx	r9
   d43d0:	e007      	b.n	d43e2 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x106>
                    }
                    else if (_onPacketFunctionWithSender)
   d43d2:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
   d43d6:	3310      	adds	r3, #16
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	b113      	cbz	r3, d43e2 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x106>
                    {
                        _onPacketFunctionWithSender(this, _decodeBuffer, numDecoded);
   d43dc:	4671      	mov	r1, lr
   d43de:	4620      	mov	r0, r4
   d43e0:	4798      	blx	r3
   d43e2:	f8d7 d004 	ldr.w	sp, [r7, #4]
                    }
                }

                _receiveBufferIndex = 0;
   d43e6:	2300      	movs	r3, #0
   d43e8:	602b      	str	r3, [r5, #0]
   d43ea:	e009      	b.n	d4400 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x124>
                _recieveBufferOverflow = false;
            }
            else
            {
                if ((_receiveBufferIndex + 1) < ReceiveBufferSize)
   d43ec:	682b      	ldr	r3, [r5, #0]
   d43ee:	1c5a      	adds	r2, r3, #1
   d43f0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   d43f4:	d203      	bcs.n	d43fe <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x122>
                {
                    _receiveBuffer[_receiveBufferIndex++] = data;
   d43f6:	4423      	add	r3, r4
   d43f8:	602a      	str	r2, [r5, #0]
   d43fa:	7058      	strb	r0, [r3, #1]
   d43fc:	e784      	b.n	d4308 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x2c>
                }
                else
                {
                    // The buffer will be in an overflowed state if we write
                    // so set a buffer overflowed flag.
                    _recieveBufferOverflow = true;
   d43fe:	2301      	movs	r3, #1
   d4400:	7023      	strb	r3, [r4, #0]
   d4402:	e781      	b.n	d4308 <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv+0x2c>
                }
            }
        }
    }
   d4404:	371c      	adds	r7, #28
   d4406:	46bd      	mov	sp, r7
   d4408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d440c <loop>:
}

void loop() {
   d440c:	b538      	push	{r3, r4, r5, lr}
    Particle.disconnect();
  }
  */

  // Keep track of frame time
  static unsigned long lastTimeInMicroSecs = micros();
   d440e:	4d0e      	ldr	r5, [pc, #56]	; (d4448 <loop+0x3c>)
   d4410:	4c0e      	ldr	r4, [pc, #56]	; (d444c <loop+0x40>)
   d4412:	682b      	ldr	r3, [r5, #0]
   d4414:	f013 0f01 	tst.w	r3, #1
   d4418:	d109      	bne.n	d442e <loop+0x22>
   d441a:	4628      	mov	r0, r5
   d441c:	f7ff fe43 	bl	d40a6 <__cxa_guard_acquire>
   d4420:	b128      	cbz	r0, d442e <loop+0x22>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4422:	f000 f899 	bl	d4558 <HAL_Timer_Get_Micro_Seconds>
   d4426:	6020      	str	r0, [r4, #0]
   d4428:	4628      	mov	r0, r5
   d442a:	f7ff fe41 	bl	d40b0 <__cxa_guard_release>
   d442e:	f000 f893 	bl	d4558 <HAL_Timer_Get_Micro_Seconds>
  unsigned long currTimeMicroSecs = micros();
  unsigned long dtMicroSecs = currTimeMicroSecs - lastTimeInMicroSecs;
   d4432:	6821      	ldr	r1, [r4, #0]
  lastTimeInMicroSecs = currTimeMicroSecs;
   d4434:	6020      	str	r0, [r4, #0]

  // Listen for incoming data, parse it, do the heavy lifting
  client.run(dtMicroSecs);
   d4436:	1a41      	subs	r1, r0, r1
   d4438:	4805      	ldr	r0, [pc, #20]	; (d4450 <loop+0x44>)
   d443a:	f7ff fef1 	bl	d4220 <_ZN12MasterClient3runEm>

  // For recieving / decoding incoming packets from the slave (if any)
  slaveSerial.update();
   d443e:	4805      	ldr	r0, [pc, #20]	; (d4454 <loop+0x48>)
   d4440:	f7ff ff4c 	bl	d42dc <_ZN13PacketSerial_I4COBSLh0ELj16384EE6updateEv>
   d4444:	bd38      	pop	{r3, r4, r5, pc}
   d4446:	bf00      	nop
   d4448:	2003e4f4 	.word	0x2003e4f4
   d444c:	2003a4dc 	.word	0x2003a4dc
   d4450:	20035bec 	.word	0x20035bec
   d4454:	2003a4e0 	.word	0x2003a4e0

000d4458 <_GLOBAL__sub_I_slaveSerial>:
   d4458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d445a:	f000 f84d 	bl	d44f8 <HAL_Pin_Map>
    /// \brief Construct a default PacketSerial_ device.
    PacketSerial_():
        _receiveBufferIndex(0),
        _stream(nullptr),
        _onPacketFunction(nullptr),
        _onPacketFunctionWithSender(nullptr)
   d445e:	4e17      	ldr	r6, [pc, #92]	; (d44bc <_GLOBAL__sub_I_slaveSerial+0x64>)
#include "../lib/led3d/voxel.h"

#include "VoxelModel.h"
#include "MasterClient.h"

led3d::LED3DPacketSerial slaveSerial;
   d4460:	4f17      	ldr	r7, [pc, #92]	; (d44c0 <_GLOBAL__sub_I_slaveSerial+0x68>)
  public:
    VoxelModel(): gridSizeX(0), gridSizeY(0), gridSizeZ(0) {}
   d4462:	4d18      	ldr	r5, [pc, #96]	; (d44c4 <_GLOBAL__sub_I_slaveSerial+0x6c>)
   d4464:	4918      	ldr	r1, [pc, #96]	; (d44c8 <_GLOBAL__sub_I_slaveSerial+0x70>)
   d4466:	f244 0304 	movw	r3, #16388	; 0x4004
   d446a:	2400      	movs	r4, #0
   d446c:	50f4      	str	r4, [r6, r3]
   d446e:	f244 0308 	movw	r3, #16392	; 0x4008
   d4472:	463a      	mov	r2, r7
   d4474:	50f4      	str	r4, [r6, r3]
   d4476:	f244 030c 	movw	r3, #16396	; 0x400c
   d447a:	4630      	mov	r0, r6
   d447c:	50f4      	str	r4, [r6, r3]
   d447e:	f244 0310 	movw	r3, #16400	; 0x4010
   d4482:	7034      	strb	r4, [r6, #0]
   d4484:	50f4      	str	r4, [r6, r3]
   d4486:	f001 fd73 	bl	d5f70 <__aeabi_atexit>
   d448a:	702c      	strb	r4, [r5, #0]
   d448c:	706c      	strb	r4, [r5, #1]
   d448e:	70ac      	strb	r4, [r5, #2]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d4490:	606c      	str	r4, [r5, #4]
   d4492:	60ac      	str	r4, [r5, #8]
   d4494:	60ec      	str	r4, [r5, #12]
VoxelModel voxelModel;
MasterClient client(voxelModel, slaveSerial);
   d4496:	4c0d      	ldr	r4, [pc, #52]	; (d44cc <_GLOBAL__sub_I_slaveSerial+0x74>)

#include "VoxelModel.h"
#include "MasterClient.h"

led3d::LED3DPacketSerial slaveSerial;
VoxelModel voxelModel;
   d4498:	490d      	ldr	r1, [pc, #52]	; (d44d0 <_GLOBAL__sub_I_slaveSerial+0x78>)
   d449a:	463a      	mov	r2, r7
   d449c:	4628      	mov	r0, r5
   d449e:	f001 fd67 	bl	d5f70 <__aeabi_atexit>
MasterClient client(voxelModel, slaveSerial);
   d44a2:	4632      	mov	r2, r6
   d44a4:	4629      	mov	r1, r5
   d44a6:	4620      	mov	r0, r4
   d44a8:	f7ff fe4e 	bl	d4148 <_ZN12MasterClientC1ER10VoxelModelR13PacketSerial_I4COBSLh0ELj16384EE>
   d44ac:	463a      	mov	r2, r7
   d44ae:	4620      	mov	r0, r4
   d44b0:	4908      	ldr	r1, [pc, #32]	; (d44d4 <_GLOBAL__sub_I_slaveSerial+0x7c>)
  // Listen for incoming data, parse it, do the heavy lifting
  client.run(dtMicroSecs);

  // For recieving / decoding incoming packets from the slave (if any)
  slaveSerial.update();
   d44b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "VoxelModel.h"
#include "MasterClient.h"

led3d::LED3DPacketSerial slaveSerial;
VoxelModel voxelModel;
MasterClient client(voxelModel, slaveSerial);
   d44b6:	f001 bd5b 	b.w	d5f70 <__aeabi_atexit>
   d44ba:	bf00      	nop
   d44bc:	2003a4e0 	.word	0x2003a4e0
   d44c0:	20035bd8 	.word	0x20035bd8
   d44c4:	20035bdc 	.word	0x20035bdc
   d44c8:	000d424d 	.word	0x000d424d
   d44cc:	20035bec 	.word	0x20035bec
   d44d0:	000d4265 	.word	0x000d4265
   d44d4:	000d41c5 	.word	0x000d41c5

000d44d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <netdb_freeaddrinfo+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	689b      	ldr	r3, [r3, #8]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030268 	.word	0x00030268

000d44e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <netdb_getaddrinfo+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	68db      	ldr	r3, [r3, #12]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030268 	.word	0x00030268

000d44f8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_Pin_Map+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	681b      	ldr	r3, [r3, #0]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003022c 	.word	0x0003022c

000d4508 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <if_index_to_name+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	695b      	ldr	r3, [r3, #20]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003026c 	.word	0x0003026c

000d4518 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <if_get_by_index+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	699b      	ldr	r3, [r3, #24]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003026c 	.word	0x0003026c

000d4528 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <if_get_addrs+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003026c 	.word	0x0003026c

000d4538 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <if_free_if_addrs+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003026c 	.word	0x0003026c

000d4548 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_RNG_GetRandomNumber+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	685b      	ldr	r3, [r3, #4]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030218 	.word	0x00030218

000d4558 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	691b      	ldr	r3, [r3, #16]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030218 	.word	0x00030218

000d4568 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	695b      	ldr	r3, [r3, #20]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030218 	.word	0x00030218

000d4578 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <os_thread_is_current+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	689b      	ldr	r3, [r3, #8]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030248 	.word	0x00030248

000d4588 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <os_thread_join+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	691b      	ldr	r3, [r3, #16]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030248 	.word	0x00030248

000d4598 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <os_thread_cleanup+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	695b      	ldr	r3, [r3, #20]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030248 	.word	0x00030248

000d45a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <os_mutex_recursive_create+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030248 	.word	0x00030248

000d45b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <os_mutex_recursive_destroy+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030248 	.word	0x00030248

000d45c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <inet_inet_ntop+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	695b      	ldr	r3, [r3, #20]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030264 	.word	0x00030264

000d45d8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <inet_htonl+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	6a1b      	ldr	r3, [r3, #32]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030264 	.word	0x00030264

000d45e8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <inet_ntohs+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030264 	.word	0x00030264

000d45f8 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <inet_htons+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030264 	.word	0x00030264

000d4608 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USART_Init+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	681b      	ldr	r3, [r3, #0]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003023c 	.word	0x0003023c

000d4618 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USART_Write_Data+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	68db      	ldr	r3, [r3, #12]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003023c 	.word	0x0003023c

000d4628 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USART_Available_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	691b      	ldr	r3, [r3, #16]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003023c 	.word	0x0003023c

000d4638 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USART_Read_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	695b      	ldr	r3, [r3, #20]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003023c 	.word	0x0003023c

000d4648 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USART_Peek_Data+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	699b      	ldr	r3, [r3, #24]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003023c 	.word	0x0003023c

000d4658 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_USART_Flush_Data+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	69db      	ldr	r3, [r3, #28]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003023c 	.word	0x0003023c

000d4668 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_USART_Available_Data_For_Write+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003023c 	.word	0x0003023c

000d4678 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <HAL_USART_BeginConfig+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003023c 	.word	0x0003023c

000d4688 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <sock_bind+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	685b      	ldr	r3, [r3, #4]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030238 	.word	0x00030238

000d4698 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <sock_setsockopt+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	699b      	ldr	r3, [r3, #24]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030238 	.word	0x00030238

000d46a8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <sock_close+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	69db      	ldr	r3, [r3, #28]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030238 	.word	0x00030238

000d46b8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <sock_connect+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6a1b      	ldr	r3, [r3, #32]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030238 	.word	0x00030238

000d46c8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <sock_recv+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030238 	.word	0x00030238

000d46d8 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <sock_recvfrom+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030238 	.word	0x00030238

000d46e8 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <sock_send+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030238 	.word	0x00030238

000d46f8 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <sock_sendto+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030238 	.word	0x00030238

000d4708 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <sock_socket+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030238 	.word	0x00030238

000d4718 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <HAL_USB_USART_Init+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	681b      	ldr	r3, [r3, #0]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003024c 	.word	0x0003024c

000d4728 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <HAL_USB_USART_Begin+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	685b      	ldr	r3, [r3, #4]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003024c 	.word	0x0003024c

000d4738 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <HAL_USB_USART_Available_Data+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	691b      	ldr	r3, [r3, #16]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003024c 	.word	0x0003024c

000d4748 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	695b      	ldr	r3, [r3, #20]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003024c 	.word	0x0003024c

000d4758 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_USB_USART_Receive_Data+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	699b      	ldr	r3, [r3, #24]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003024c 	.word	0x0003024c

000d4768 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_USB_USART_Send_Data+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	69db      	ldr	r3, [r3, #28]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003024c 	.word	0x0003024c

000d4778 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_USB_USART_Flush_Data+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	6a1b      	ldr	r3, [r3, #32]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003024c 	.word	0x0003024c

000d4788 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <log_message+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030260 	.word	0x00030260

000d4798 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <set_system_mode+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	685b      	ldr	r3, [r3, #4]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030220 	.word	0x00030220

000d47a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b03      	ldr	r3, [pc, #12]	; (d47b8 <system_ctrl_set_app_request_handler+0x10>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d47b2:	9301      	str	r3, [sp, #4]
   d47b4:	bd08      	pop	{r3, pc}
   d47b6:	0000      	.short	0x0000
   d47b8:	00030220 	.word	0x00030220

000d47bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b03      	ldr	r3, [pc, #12]	; (d47cc <system_ctrl_set_result+0x10>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47c6:	9301      	str	r3, [sp, #4]
   d47c8:	bd08      	pop	{r3, pc}
   d47ca:	0000      	.short	0x0000
   d47cc:	00030220 	.word	0x00030220

000d47d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_connect+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	685b      	ldr	r3, [r3, #4]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <network_connecting+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	689b      	ldr	r3, [r3, #8]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030240 	.word	0x00030240

000d47f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <network_disconnect+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	68db      	ldr	r3, [r3, #12]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030240 	.word	0x00030240

000d4800 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <network_ready+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	691b      	ldr	r3, [r3, #16]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030240 	.word	0x00030240

000d4810 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <network_on+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	695b      	ldr	r3, [r3, #20]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030240 	.word	0x00030240

000d4820 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <network_off+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	699b      	ldr	r3, [r3, #24]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030240 	.word	0x00030240

000d4830 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <network_listen+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	69db      	ldr	r3, [r3, #28]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030240 	.word	0x00030240

000d4840 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <network_listening+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	6a1b      	ldr	r3, [r3, #32]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030240 	.word	0x00030240

000d4850 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <network_set_listen_timeout+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030240 	.word	0x00030240

000d4860 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <network_get_listen_timeout+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030240 	.word	0x00030240

000d4870 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <spark_cloud_flag_connect+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	68db      	ldr	r3, [r3, #12]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030244 	.word	0x00030244

000d4880 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030244 	.word	0x00030244

000d4890 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <malloc+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	681b      	ldr	r3, [r3, #0]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003021c 	.word	0x0003021c

000d48a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <free+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	685b      	ldr	r3, [r3, #4]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003021c 	.word	0x0003021c

000d48b0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <vsnprintf+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003021c 	.word	0x0003021c

000d48c0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <__errno+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003021c 	.word	0x0003021c

000d48d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48d0:	2200      	movs	r2, #0
   d48d2:	4611      	mov	r1, r2
   d48d4:	6840      	ldr	r0, [r0, #4]
   d48d6:	f7ff bfb3 	b.w	d4840 <network_listening>

000d48da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48da:	2200      	movs	r2, #0
   d48dc:	4611      	mov	r1, r2
   d48de:	6840      	ldr	r0, [r0, #4]
   d48e0:	f7ff bfbe 	b.w	d4860 <network_get_listen_timeout>

000d48e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48e4:	2200      	movs	r2, #0
   d48e6:	6840      	ldr	r0, [r0, #4]
   d48e8:	f7ff bfb2 	b.w	d4850 <network_set_listen_timeout>

000d48ec <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48ec:	2200      	movs	r2, #0
   d48ee:	f081 0101 	eor.w	r1, r1, #1
   d48f2:	6840      	ldr	r0, [r0, #4]
   d48f4:	f7ff bf9c 	b.w	d4830 <network_listen>

000d48f8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48f8:	2300      	movs	r3, #0
   d48fa:	461a      	mov	r2, r3
   d48fc:	4619      	mov	r1, r3
   d48fe:	6840      	ldr	r0, [r0, #4]
   d4900:	f7ff bf8e 	b.w	d4820 <network_off>

000d4904 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4904:	2300      	movs	r3, #0
   d4906:	461a      	mov	r2, r3
   d4908:	4619      	mov	r1, r3
   d490a:	6840      	ldr	r0, [r0, #4]
   d490c:	f7ff bf80 	b.w	d4810 <network_on>

000d4910 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4910:	2200      	movs	r2, #0
   d4912:	4611      	mov	r1, r2
   d4914:	6840      	ldr	r0, [r0, #4]
   d4916:	f7ff bf73 	b.w	d4800 <network_ready>

000d491a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d491a:	2200      	movs	r2, #0
   d491c:	4611      	mov	r1, r2
   d491e:	6840      	ldr	r0, [r0, #4]
   d4920:	f7ff bf5e 	b.w	d47e0 <network_connecting>

000d4924 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4924:	2200      	movs	r2, #0
   d4926:	2102      	movs	r1, #2
   d4928:	6840      	ldr	r0, [r0, #4]
   d492a:	f7ff bf61 	b.w	d47f0 <network_disconnect>

000d492e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d492e:	2300      	movs	r3, #0
   d4930:	461a      	mov	r2, r3
   d4932:	6840      	ldr	r0, [r0, #4]
   d4934:	f7ff bf4c 	b.w	d47d0 <network_connect>

000d4938 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4938:	4b02      	ldr	r3, [pc, #8]	; (d4944 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d493a:	2203      	movs	r2, #3
   d493c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d493e:	4a02      	ldr	r2, [pc, #8]	; (d4948 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4940:	601a      	str	r2, [r3, #0]
   d4942:	4770      	bx	lr
   d4944:	2003e4f8 	.word	0x2003e4f8
   d4948:	000d6678 	.word	0x000d6678

000d494c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d494c:	b510      	push	{r4, lr}
   d494e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4950:	6800      	ldr	r0, [r0, #0]
   d4952:	b118      	cbz	r0, d495c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4954:	f7ff ffa4 	bl	d48a0 <free>
            wakeupSource_ = nullptr;
   d4958:	2300      	movs	r3, #0
   d495a:	6023      	str	r3, [r4, #0]
   d495c:	bd10      	pop	{r4, pc}

000d495e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d495e:	b510      	push	{r4, lr}
   d4960:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4962:	f7ff fff3 	bl	d494c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4966:	4620      	mov	r0, r4
   d4968:	bd10      	pop	{r4, pc}
	...

000d496c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d496c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d496e:	4c09      	ldr	r4, [pc, #36]	; (d4994 <_GLOBAL__sub_I_System+0x28>)
   d4970:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4972:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4976:	6020      	str	r0, [r4, #0]
   d4978:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d497a:	71a0      	strb	r0, [r4, #6]
   d497c:	8120      	strh	r0, [r4, #8]
   d497e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4980:	f7ff ff0a 	bl	d4798 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4984:	4620      	mov	r0, r4
   d4986:	4a04      	ldr	r2, [pc, #16]	; (d4998 <_GLOBAL__sub_I_System+0x2c>)
   d4988:	4904      	ldr	r1, [pc, #16]	; (d499c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d498a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d498e:	f001 baef 	b.w	d5f70 <__aeabi_atexit>
   d4992:	bf00      	nop
   d4994:	2003e500 	.word	0x2003e500
   d4998:	20035bd8 	.word	0x20035bd8
   d499c:	000d495f 	.word	0x000d495f

000d49a0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d49a0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d49a2:	6804      	ldr	r4, [r0, #0]
   d49a4:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d49a6:	46a4      	mov	ip, r4
    }
   d49a8:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d49ac:	4760      	bx	ip

000d49ae <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d49ae:	6803      	ldr	r3, [r0, #0]
   d49b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d49b2:	4718      	bx	r3

000d49b4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d49b4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d49b6:	4770      	bx	lr

000d49b8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d49b8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d49ba:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d49bc:	1a10      	subs	r0, r2, r0
   d49be:	4770      	bx	lr

000d49c0 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d49c0:	b513      	push	{r0, r1, r4, lr}
   d49c2:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d49c4:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d49c6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d49ca:	68d4      	ldr	r4, [r2, #12]
   d49cc:	4619      	mov	r1, r3
   d49ce:	2201      	movs	r2, #1
   d49d0:	47a0      	blx	r4
}
   d49d2:	b002      	add	sp, #8
   d49d4:	bd10      	pop	{r4, pc}

000d49d6 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d49d6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d49d8:	6803      	ldr	r3, [r0, #0]
   d49da:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d49dc:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d49de:	4798      	blx	r3
   d49e0:	b128      	cbz	r0, d49ee <_ZN3UDP4readEv+0x18>
   d49e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d49e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d49e6:	1c59      	adds	r1, r3, #1
   d49e8:	86e1      	strh	r1, [r4, #54]	; 0x36
   d49ea:	5cd0      	ldrb	r0, [r2, r3]
   d49ec:	bd10      	pop	{r4, pc}
   d49ee:	f04f 30ff 	mov.w	r0, #4294967295
}
   d49f2:	bd10      	pop	{r4, pc}

000d49f4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d49f4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d49f6:	6803      	ldr	r3, [r0, #0]
   d49f8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d49fa:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d49fc:	4798      	blx	r3
   d49fe:	b118      	cbz	r0, d4a08 <_ZN3UDP4peekEv+0x14>
   d4a00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4a02:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4a04:	5cd0      	ldrb	r0, [r2, r3]
   d4a06:	bd10      	pop	{r4, pc}
   d4a08:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4a0c:	bd10      	pop	{r4, pc}

000d4a0e <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4a0e:	4770      	bx	lr

000d4a10 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4a10:	b410      	push	{r4}
   d4a12:	4603      	mov	r3, r0
   d4a14:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4a16:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4a18:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4a1a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4a1c:	6803      	ldr	r3, [r0, #0]
   d4a1e:	1a52      	subs	r2, r2, r1
   d4a20:	68db      	ldr	r3, [r3, #12]
   d4a22:	4421      	add	r1, r4
}
   d4a24:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4a28:	4718      	bx	r3

000d4a2a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4a2a:	f1a0 0010 	sub.w	r0, r0, #16
   d4a2e:	f7ff bfef 	b.w	d4a10 <_ZNK3UDP7printToER5Print>

000d4a32 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4a32:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4a34:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4a36:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4a38:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d4a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4a3c:	4604      	mov	r4, r0
   d4a3e:	460f      	mov	r7, r1
   d4a40:	4615      	mov	r5, r2
    stop();
   d4a42:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d4a44:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4a46:	4632      	mov	r2, r6
   d4a48:	2100      	movs	r1, #0
   d4a4a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d4a4c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4a4e:	f001 fbf8 	bl	d6242 <memset>
    saddr.sin6_len = sizeof(saddr);
   d4a52:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4a56:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4a58:	260a      	movs	r6, #10
   d4a5a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d4a5e:	f7ff fdcb 	bl	d45f8 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4a62:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4a64:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4a68:	2102      	movs	r1, #2
   d4a6a:	4630      	mov	r0, r6
   d4a6c:	f7ff fe4c 	bl	d4708 <sock_socket>

    if (_sock < 0) {
   d4a70:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4a72:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d4a74:	db24      	blt.n	d4ac0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4a76:	2204      	movs	r2, #4
   d4a78:	9200      	str	r2, [sp, #0]
   d4a7a:	ab02      	add	r3, sp, #8
   d4a7c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4a80:	f7ff fe0a 	bl	d4698 <sock_setsockopt>
   d4a84:	b9e0      	cbnz	r0, d4ac0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d4a86:	b195      	cbz	r5, d4aae <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d4a88:	9003      	str	r0, [sp, #12]
   d4a8a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d4a8e:	a903      	add	r1, sp, #12
   d4a90:	b2e8      	uxtb	r0, r5
   d4a92:	f7ff fd39 	bl	d4508 <if_index_to_name>
   d4a96:	b998      	cbnz	r0, d4ac0 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4a98:	2306      	movs	r3, #6
   d4a9a:	9300      	str	r3, [sp, #0]
   d4a9c:	f241 020b 	movw	r2, #4107	; 0x100b
   d4aa0:	ab03      	add	r3, sp, #12
   d4aa2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4aa6:	6960      	ldr	r0, [r4, #20]
   d4aa8:	f7ff fdf6 	bl	d4698 <sock_setsockopt>
   d4aac:	b940      	cbnz	r0, d4ac0 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d4aae:	221c      	movs	r2, #28
   d4ab0:	a905      	add	r1, sp, #20
   d4ab2:	6960      	ldr	r0, [r4, #20]
   d4ab4:	f7ff fde8 	bl	d4688 <sock_bind>
   d4ab8:	b910      	cbnz	r0, d4ac0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d4aba:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d4abc:	2001      	movs	r0, #1
   d4abe:	e004      	b.n	d4aca <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d4ac0:	6823      	ldr	r3, [r4, #0]
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ac6:	4798      	blx	r3
   d4ac8:	2000      	movs	r0, #0
    }
    return bound;
}
   d4aca:	b00d      	add	sp, #52	; 0x34
   d4acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ace <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d4ace:	b510      	push	{r4, lr}
   d4ad0:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d4ad2:	6940      	ldr	r0, [r0, #20]
   d4ad4:	2800      	cmp	r0, #0
   d4ad6:	db01      	blt.n	d4adc <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d4ad8:	f7ff fde6 	bl	d46a8 <sock_close>
    }

    _sock = -1;
   d4adc:	f04f 33ff 	mov.w	r3, #4294967295
   d4ae0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4ae2:	2300      	movs	r3, #0
   d4ae4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4ae6:	8723      	strh	r3, [r4, #56]	; 0x38
   d4ae8:	bd10      	pop	{r4, pc}

000d4aea <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4aea:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4aec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4aee:	4605      	mov	r5, r0
   d4af0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4af2:	b113      	cbz	r3, d4afa <_ZN3UDP5writeEPKhj+0x10>
   d4af4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d4af6:	1a24      	subs	r4, r4, r0
   d4af8:	e000      	b.n	d4afc <_ZN3UDP5writeEPKhj+0x12>
   d4afa:	461c      	mov	r4, r3
   d4afc:	4294      	cmp	r4, r2
   d4afe:	bf28      	it	cs
   d4b00:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d4b02:	4622      	mov	r2, r4
   d4b04:	4418      	add	r0, r3
   d4b06:	f001 fb91 	bl	d622c <memcpy>
    _offset += size;
   d4b0a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d4b0c:	4423      	add	r3, r4
   d4b0e:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d4b10:	4620      	mov	r0, r4
   d4b12:	bd38      	pop	{r3, r4, r5, pc}

000d4b14 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4b14:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d4b16:	6803      	ldr	r3, [r0, #0]
   d4b18:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4b1a:	4604      	mov	r4, r0
   d4b1c:	460e      	mov	r6, r1
   d4b1e:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d4b20:	4798      	blx	r3
   d4b22:	b188      	cbz	r0, d4b48 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d4b24:	6823      	ldr	r3, [r4, #0]
   d4b26:	4620      	mov	r0, r4
   d4b28:	691b      	ldr	r3, [r3, #16]
   d4b2a:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d4b2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4b2e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4b30:	4285      	cmp	r5, r0
   d4b32:	bfa8      	it	ge
   d4b34:	4605      	movge	r5, r0
   d4b36:	4419      	add	r1, r3
   d4b38:	462a      	mov	r2, r5
   d4b3a:	4630      	mov	r0, r6
   d4b3c:	f001 fb76 	bl	d622c <memcpy>
        _offset += read;
   d4b40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4b42:	442b      	add	r3, r5
   d4b44:	86e3      	strh	r3, [r4, #54]	; 0x36
   d4b46:	e001      	b.n	d4b4c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d4b48:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d4b4c:	4628      	mov	r0, r5
   d4b4e:	bd70      	pop	{r4, r5, r6, pc}

000d4b50 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d4b50:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4b52:	4604      	mov	r4, r0
   d4b54:	4b05      	ldr	r3, [pc, #20]	; (d4b6c <_ZN3UDP8remoteIPEv+0x1c>)
   d4b56:	f844 3b04 	str.w	r3, [r4], #4
   d4b5a:	f101 0520 	add.w	r5, r1, #32
   d4b5e:	4606      	mov	r6, r0
   d4b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b64:	682b      	ldr	r3, [r5, #0]
   d4b66:	7023      	strb	r3, [r4, #0]
   d4b68:	4630      	mov	r0, r6
   d4b6a:	bd70      	pop	{r4, r5, r6, pc}
   d4b6c:	000d6820 	.word	0x000d6820

000d4b70 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4b72:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4b74:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4b76:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4b78:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d4b7a:	4a0a      	ldr	r2, [pc, #40]	; (d4ba4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d4b7c:	9202      	str	r2, [sp, #8]
   d4b7e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4b80:	468e      	mov	lr, r1
   d4b82:	4606      	mov	r6, r0
   d4b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b86:	ac03      	add	r4, sp, #12
   d4b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b8a:	682b      	ldr	r3, [r5, #0]
   d4b8c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4b8e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4b92:	9300      	str	r3, [sp, #0]
   d4b94:	4662      	mov	r2, ip
   d4b96:	ab02      	add	r3, sp, #8
   d4b98:	4671      	mov	r1, lr
   d4b9a:	4630      	mov	r0, r6
   d4b9c:	47b8      	blx	r7
    }
   d4b9e:	b009      	add	sp, #36	; 0x24
   d4ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ba2:	bf00      	nop
   d4ba4:	000d6820 	.word	0x000d6820

000d4ba8 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4baa:	6803      	ldr	r3, [r0, #0]
   d4bac:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d4bb0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4bb2:	4b0d      	ldr	r3, [pc, #52]	; (d4be8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4bb4:	b089      	sub	sp, #36	; 0x24
   d4bb6:	f100 0620 	add.w	r6, r0, #32
   d4bba:	4604      	mov	r4, r0
   d4bbc:	9302      	str	r3, [sp, #8]
   d4bbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4bc0:	ad03      	add	r5, sp, #12
   d4bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4bc4:	6833      	ldr	r3, [r6, #0]
   d4bc6:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4bc8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d4bca:	9300      	str	r3, [sp, #0]
   d4bcc:	4672      	mov	r2, lr
   d4bce:	ab02      	add	r3, sp, #8
   d4bd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	47b8      	blx	r7
    flush(); // wait for send to complete
   d4bd6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4bd8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d4bda:	69db      	ldr	r3, [r3, #28]
   d4bdc:	4620      	mov	r0, r4
   d4bde:	4798      	blx	r3
    return result;
}
   d4be0:	4628      	mov	r0, r5
   d4be2:	b009      	add	sp, #36	; 0x24
   d4be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4be6:	bf00      	nop
   d4be8:	000d6820 	.word	0x000d6820

000d4bec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d4bee:	7843      	ldrb	r3, [r0, #1]
   d4bf0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4bf2:	b08d      	sub	sp, #52	; 0x34
   d4bf4:	4605      	mov	r5, r0
   d4bf6:	460c      	mov	r4, r1
   d4bf8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d4bfa:	d101      	bne.n	d4c00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d4bfc:	1d01      	adds	r1, r0, #4
   d4bfe:	e033      	b.n	d4c68 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d4c00:	2b0a      	cmp	r3, #10
   d4c02:	d135      	bne.n	d4c70 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d4c04:	2211      	movs	r2, #17
   d4c06:	2100      	movs	r1, #0
   d4c08:	a801      	add	r0, sp, #4
   d4c0a:	f001 fb1a 	bl	d6242 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d4c0e:	68ab      	ldr	r3, [r5, #8]
   d4c10:	b943      	cbnz	r3, d4c24 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4c12:	68eb      	ldr	r3, [r5, #12]
   d4c14:	b933      	cbnz	r3, d4c24 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4c16:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d4c1a:	692e      	ldr	r6, [r5, #16]
   d4c1c:	f7ff fcdc 	bl	d45d8 <inet_htonl>
   d4c20:	4286      	cmp	r6, r0
   d4c22:	d01f      	beq.n	d4c64 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4c24:	f105 0308 	add.w	r3, r5, #8
   d4c28:	ae01      	add	r6, sp, #4
   d4c2a:	f105 0e18 	add.w	lr, r5, #24
   d4c2e:	6818      	ldr	r0, [r3, #0]
   d4c30:	6859      	ldr	r1, [r3, #4]
   d4c32:	4632      	mov	r2, r6
   d4c34:	c203      	stmia	r2!, {r0, r1}
   d4c36:	3308      	adds	r3, #8
   d4c38:	4573      	cmp	r3, lr
   d4c3a:	4616      	mov	r6, r2
   d4c3c:	d1f7      	bne.n	d4c2e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d4c3e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d4c40:	a901      	add	r1, sp, #4
   d4c42:	a806      	add	r0, sp, #24
   d4c44:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d4c46:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d4c4a:	f000 fbad 	bl	d53a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4c4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4c50:	3404      	adds	r4, #4
   d4c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c54:	6833      	ldr	r3, [r6, #0]
   d4c56:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d4c58:	b157      	cbz	r7, d4c70 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d4c5a:	8868      	ldrh	r0, [r5, #2]
   d4c5c:	f7ff fcc4 	bl	d45e8 <inet_ntohs>
   d4c60:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d4c62:	e005      	b.n	d4c70 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d4c64:	f105 0114 	add.w	r1, r5, #20
   d4c68:	4620      	mov	r0, r4
   d4c6a:	f000 fbdf 	bl	d542c <_ZN9IPAddressaSEPKh>
   d4c6e:	e7f3      	b.n	d4c58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d4c70:	b00d      	add	sp, #52	; 0x34
   d4c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c74 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c78:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d4c7a:	ab0e      	add	r3, sp, #56	; 0x38
   d4c7c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4c7e:	4606      	mov	r6, r0
   d4c80:	4617      	mov	r7, r2
   d4c82:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d4c84:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d4c88:	462a      	mov	r2, r5
   d4c8a:	4629      	mov	r1, r5
   d4c8c:	f7ff fc2c 	bl	d44e8 <netdb_getaddrinfo>
   d4c90:	2800      	cmp	r0, #0
   d4c92:	db1f      	blt.n	d4cd4 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d4c94:	9b01      	ldr	r3, [sp, #4]
   d4c96:	b1fb      	cbz	r3, d4cd8 <_ZN3UDP11beginPacketEPKct+0x64>
   d4c98:	695b      	ldr	r3, [r3, #20]
   d4c9a:	b1eb      	cbz	r3, d4cd8 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d4c9c:	a802      	add	r0, sp, #8
   d4c9e:	f000 fb75 	bl	d538c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d4ca2:	9b01      	ldr	r3, [sp, #4]
   d4ca4:	462a      	mov	r2, r5
   d4ca6:	6958      	ldr	r0, [r3, #20]
   d4ca8:	a902      	add	r1, sp, #8
   d4caa:	f7ff ff9f 	bl	d4bec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d4cae:	a802      	add	r0, sp, #8
   d4cb0:	f000 fb8c 	bl	d53cc <_ZNK9IPAddresscvbEv>
        if (addr) {
   d4cb4:	b180      	cbz	r0, d4cd8 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d4cb6:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4cb8:	ad03      	add	r5, sp, #12
   d4cba:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d4cbe:	4b0b      	ldr	r3, [pc, #44]	; (d4cec <_ZN3UDP11beginPacketEPKct+0x78>)
   d4cc0:	9308      	str	r3, [sp, #32]
   d4cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4cc4:	ac09      	add	r4, sp, #36	; 0x24
   d4cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4cc8:	682b      	ldr	r3, [r5, #0]
   d4cca:	7023      	strb	r3, [r4, #0]
   d4ccc:	463a      	mov	r2, r7
   d4cce:	a908      	add	r1, sp, #32
   d4cd0:	4630      	mov	r0, r6
   d4cd2:	47c0      	blx	r8
   d4cd4:	4604      	mov	r4, r0
   d4cd6:	e001      	b.n	d4cdc <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d4cd8:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d4cdc:	9801      	ldr	r0, [sp, #4]
   d4cde:	f7ff fbfb 	bl	d44d8 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d4ce2:	4620      	mov	r0, r4
   d4ce4:	b00e      	add	sp, #56	; 0x38
   d4ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4cea:	bf00      	nop
   d4cec:	000d6820 	.word	0x000d6820

000d4cf0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4cf4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d4cf8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4cfc:	b08c      	sub	sp, #48	; 0x30
   d4cfe:	4605      	mov	r5, r0
   d4d00:	460c      	mov	r4, r1
   d4d02:	4617      	mov	r7, r2
   d4d04:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4d06:	db00      	blt.n	d4d0a <_ZN3UDP13receivePacketEPhjm+0x1a>
   d4d08:	b911      	cbnz	r1, d4d10 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d4d0a:	f04f 30ff 	mov.w	r0, #4294967295
   d4d0e:	e035      	b.n	d4d7c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d4d10:	f04f 0a1c 	mov.w	sl, #28
   d4d14:	ae05      	add	r6, sp, #20
   d4d16:	4652      	mov	r2, sl
   d4d18:	2100      	movs	r1, #0
   d4d1a:	4630      	mov	r0, r6
   d4d1c:	f001 fa91 	bl	d6242 <memset>
        socklen_t slen = sizeof(saddr);
   d4d20:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d4d24:	f1b9 0f00 	cmp.w	r9, #0
   d4d28:	d014      	beq.n	d4d54 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d4d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d2e:	fbb9 f1f2 	udiv	r1, r9, r2
   d4d32:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d4d34:	fb02 9111 	mls	r1, r2, r1, r9
   d4d38:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4d3a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d4d3c:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4d3e:	9300      	str	r3, [sp, #0]
   d4d40:	f241 0206 	movw	r2, #4102	; 0x1006
   d4d44:	ab03      	add	r3, sp, #12
   d4d46:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4d4a:	4640      	mov	r0, r8
   d4d4c:	f7ff fca4 	bl	d4698 <sock_setsockopt>
            if (ret) {
   d4d50:	b108      	cbz	r0, d4d56 <_ZN3UDP13receivePacketEPhjm+0x66>
   d4d52:	e013      	b.n	d4d7c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d4d54:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4d56:	ab02      	add	r3, sp, #8
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	4621      	mov	r1, r4
   d4d5c:	4603      	mov	r3, r0
   d4d5e:	9600      	str	r6, [sp, #0]
   d4d60:	463a      	mov	r2, r7
   d4d62:	6968      	ldr	r0, [r5, #20]
   d4d64:	f7ff fcb8 	bl	d46d8 <sock_recvfrom>
        if (ret >= 0) {
   d4d68:	1e04      	subs	r4, r0, #0
   d4d6a:	db06      	blt.n	d4d7a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d4d6c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d4d70:	f105 011c 	add.w	r1, r5, #28
   d4d74:	4630      	mov	r0, r6
   d4d76:	f7ff ff39 	bl	d4bec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4d7a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d4d7c:	b00c      	add	sp, #48	; 0x30
   d4d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4d82 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4d82:	b538      	push	{r3, r4, r5, lr}
   d4d84:	4605      	mov	r5, r0
   d4d86:	4614      	mov	r4, r2
   d4d88:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d4d8a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4d8c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d4d8e:	d111      	bne.n	d4db4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d4d90:	231c      	movs	r3, #28
   d4d92:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d4d94:	230a      	movs	r3, #10
   d4d96:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d4d98:	f7ff fc2e 	bl	d45f8 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4d9c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d4d9e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4da2:	1d2b      	adds	r3, r5, #4
   d4da4:	3514      	adds	r5, #20
   d4da6:	f853 2b04 	ldr.w	r2, [r3], #4
   d4daa:	f844 2b04 	str.w	r2, [r4], #4
   d4dae:	42ab      	cmp	r3, r5
   d4db0:	d1f9      	bne.n	d4da6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d4db2:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d4db4:	2b04      	cmp	r3, #4
   d4db6:	d10a      	bne.n	d4dce <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d4db8:	2310      	movs	r3, #16
   d4dba:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d4dbc:	2302      	movs	r3, #2
   d4dbe:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d4dc0:	f7ff fc1a 	bl	d45f8 <inet_htons>
   d4dc4:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d4dc6:	6868      	ldr	r0, [r5, #4]
   d4dc8:	f7ff fc06 	bl	d45d8 <inet_htonl>
   d4dcc:	6060      	str	r0, [r4, #4]
   d4dce:	bd38      	pop	{r3, r4, r5, pc}

000d4dd0 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4dd4:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4dd6:	ac03      	add	r4, sp, #12
   d4dd8:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4dda:	4699      	mov	r9, r3
   d4ddc:	4606      	mov	r6, r0
   d4dde:	460f      	mov	r7, r1
   d4de0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4de2:	2100      	movs	r1, #0
   d4de4:	462a      	mov	r2, r5
   d4de6:	4620      	mov	r0, r4
   d4de8:	f001 fa2b 	bl	d6242 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d4dec:	4622      	mov	r2, r4
   d4dee:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d4df2:	4648      	mov	r0, r9
   d4df4:	f7ff ffc5 	bl	d4d82 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d4df8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4dfc:	b143      	cbz	r3, d4e10 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d4dfe:	e88d 0030 	stmia.w	sp, {r4, r5}
   d4e02:	2300      	movs	r3, #0
   d4e04:	4642      	mov	r2, r8
   d4e06:	4639      	mov	r1, r7
   d4e08:	6970      	ldr	r0, [r6, #20]
   d4e0a:	f7ff fc75 	bl	d46f8 <sock_sendto>
   d4e0e:	e001      	b.n	d4e14 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d4e10:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d4e14:	b00b      	add	sp, #44	; 0x2c
   d4e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4e1a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e1c:	b091      	sub	sp, #68	; 0x44
   d4e1e:	460c      	mov	r4, r1
   d4e20:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d4e22:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4e24:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d4e26:	a809      	add	r0, sp, #36	; 0x24
   d4e28:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4e2a:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d4e2c:	f001 fa09 	bl	d6242 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d4e30:	aa09      	add	r2, sp, #36	; 0x24
   d4e32:	2100      	movs	r1, #0
   d4e34:	4620      	mov	r0, r4
   d4e36:	f7ff ffa4 	bl	d4d82 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d4e3a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4e3e:	2b02      	cmp	r3, #2
   d4e40:	d12e      	bne.n	d4ea0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d4e42:	2300      	movs	r3, #0
   d4e44:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d4e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4e48:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d4e4a:	b1dd      	cbz	r5, d4e84 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d4e4c:	a902      	add	r1, sp, #8
   d4e4e:	4628      	mov	r0, r5
   d4e50:	f7ff fb62 	bl	d4518 <if_get_by_index>
   d4e54:	b9b0      	cbnz	r0, d4e84 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d4e56:	a910      	add	r1, sp, #64	; 0x40
   d4e58:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d4e5c:	9802      	ldr	r0, [sp, #8]
   d4e5e:	f7ff fb63 	bl	d4528 <if_get_addrs>
   d4e62:	b960      	cbnz	r0, d4e7e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d4e64:	9b03      	ldr	r3, [sp, #12]
   d4e66:	b153      	cbz	r3, d4e7e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d4e68:	68da      	ldr	r2, [r3, #12]
   d4e6a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d4e6c:	7851      	ldrb	r1, [r2, #1]
   d4e6e:	2902      	cmp	r1, #2
   d4e70:	d103      	bne.n	d4e7a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d4e72:	6852      	ldr	r2, [r2, #4]
   d4e74:	b10a      	cbz	r2, d4e7a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d4e76:	9205      	str	r2, [sp, #20]
   d4e78:	e001      	b.n	d4e7e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d4e7a:	681b      	ldr	r3, [r3, #0]
   d4e7c:	e7f3      	b.n	d4e66 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d4e7e:	9803      	ldr	r0, [sp, #12]
   d4e80:	f7ff fb5a 	bl	d4538 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d4e84:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d4e86:	f04f 0308 	mov.w	r3, #8
   d4e8a:	9300      	str	r3, [sp, #0]
   d4e8c:	bf18      	it	ne
   d4e8e:	2203      	movne	r2, #3
   d4e90:	ab04      	add	r3, sp, #16
   d4e92:	bf08      	it	eq
   d4e94:	2204      	moveq	r2, #4
   d4e96:	2100      	movs	r1, #0
   d4e98:	4630      	mov	r0, r6
   d4e9a:	f7ff fbfd 	bl	d4698 <sock_setsockopt>
   d4e9e:	e01e      	b.n	d4ede <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d4ea0:	2b0a      	cmp	r3, #10
   d4ea2:	d11a      	bne.n	d4eda <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d4ea4:	ac04      	add	r4, sp, #16
   d4ea6:	2214      	movs	r2, #20
   d4ea8:	2100      	movs	r1, #0
   d4eaa:	4620      	mov	r0, r4
   d4eac:	f001 f9c9 	bl	d6242 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d4eb0:	ab0b      	add	r3, sp, #44	; 0x2c
   d4eb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4eb4:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d4eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4eba:	f04f 0314 	mov.w	r3, #20
   d4ebe:	9300      	str	r3, [sp, #0]
   d4ec0:	bf18      	it	ne
   d4ec2:	220c      	movne	r2, #12
   d4ec4:	4623      	mov	r3, r4
   d4ec6:	bf08      	it	eq
   d4ec8:	220d      	moveq	r2, #13
   d4eca:	2129      	movs	r1, #41	; 0x29
   d4ecc:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d4ece:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4ed0:	f7ff fbe2 	bl	d4698 <sock_setsockopt>
   d4ed4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d4ed8:	e001      	b.n	d4ede <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d4eda:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4ede:	b011      	add	sp, #68	; 0x44
   d4ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4ee4 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d4ee4:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4eea:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d4eec:	4b0b      	ldr	r3, [pc, #44]	; (d4f1c <_ZN3UDPC1Ev+0x38>)
   d4eee:	f103 0208 	add.w	r2, r3, #8
   d4ef2:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4ef4:	2500      	movs	r5, #0
   d4ef6:	6103      	str	r3, [r0, #16]
   d4ef8:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d4efc:	4604      	mov	r4, r0
   d4efe:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d4f00:	6002      	str	r2, [r0, #0]
   d4f02:	6143      	str	r3, [r0, #20]
   d4f04:	301c      	adds	r0, #28
   d4f06:	f000 fa41 	bl	d538c <_ZN9IPAddressC1Ev>
   d4f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d4f0e:	86e5      	strh	r5, [r4, #54]	; 0x36
   d4f10:	8725      	strh	r5, [r4, #56]	; 0x38
   d4f12:	63e5      	str	r5, [r4, #60]	; 0x3c
   d4f14:	6423      	str	r3, [r4, #64]	; 0x40
   d4f16:	6465      	str	r5, [r4, #68]	; 0x44
}
   d4f18:	4620      	mov	r0, r4
   d4f1a:	bd38      	pop	{r3, r4, r5, pc}
   d4f1c:	000d66a4 	.word	0x000d66a4

000d4f20 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d4f20:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d4f22:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d4f26:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d4f28:	b123      	cbz	r3, d4f34 <_ZN3UDP13releaseBufferEv+0x14>
   d4f2a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d4f2c:	b110      	cbz	r0, d4f34 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d4f2e:	2101      	movs	r1, #1
   d4f30:	f001 f823 	bl	d5f7a <_ZdlPvj>
    }
    _buffer = NULL;
   d4f34:	2300      	movs	r3, #0
   d4f36:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d4f38:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d4f3c:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4f3e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4f40:	8723      	strh	r3, [r4, #56]	; 0x38
   d4f42:	bd10      	pop	{r4, pc}

000d4f44 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d4f44:	b570      	push	{r4, r5, r6, lr}
   d4f46:	4604      	mov	r4, r0
   d4f48:	4616      	mov	r6, r2
   d4f4a:	460d      	mov	r5, r1
    releaseBuffer();
   d4f4c:	f7ff ffe8 	bl	d4f20 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d4f50:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d4f52:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d4f54:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d4f56:	b93e      	cbnz	r6, d4f68 <_ZN3UDP9setBufferEjPh+0x24>
   d4f58:	b135      	cbz	r5, d4f68 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d4f5a:	4628      	mov	r0, r5
   d4f5c:	f7ff f89d 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d4f60:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d4f62:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d4f64:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d4f68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d4f6a:	b103      	cbz	r3, d4f6e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d4f6c:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d4f6e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d4f70:	3000      	adds	r0, #0
   d4f72:	bf18      	it	ne
   d4f74:	2001      	movne	r0, #1
   d4f76:	bd70      	pop	{r4, r5, r6, pc}

000d4f78 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d4f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f7a:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d4f7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d4f7e:	4605      	mov	r5, r0
   d4f80:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d4f82:	b91a      	cbnz	r2, d4f8c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d4f84:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d4f86:	b109      	cbz	r1, d4f8c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d4f88:	f7ff ffdc 	bl	d4f44 <_ZN3UDP9setBufferEjPh>
   d4f8c:	3404      	adds	r4, #4
   d4f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4f90:	f105 0620 	add.w	r6, r5, #32
   d4f94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4f96:	6823      	ldr	r3, [r4, #0]
   d4f98:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4f9a:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d4f9c:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4f9e:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d4fa0:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d4fa2:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d4fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fa6 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d4fa6:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d4fa8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d4faa:	4604      	mov	r4, r0
   d4fac:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d4fae:	b91a      	cbnz	r2, d4fb8 <_ZN3UDP11parsePacketEm+0x12>
   d4fb0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d4fb2:	b109      	cbz	r1, d4fb8 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d4fb4:	f7ff ffc6 	bl	d4f44 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d4fb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4fba:	2200      	movs	r2, #0
   d4fbc:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d4fbe:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d4fc0:	b149      	cbz	r1, d4fd6 <_ZN3UDP11parsePacketEm+0x30>
   d4fc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d4fc4:	b13a      	cbz	r2, d4fd6 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d4fc6:	6823      	ldr	r3, [r4, #0]
   d4fc8:	4620      	mov	r0, r4
   d4fca:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d4fcc:	4633      	mov	r3, r6
   d4fce:	47a8      	blx	r5
        if (result > 0) {
   d4fd0:	2800      	cmp	r0, #0
            _total = result;
   d4fd2:	bfc8      	it	gt
   d4fd4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d4fd6:	6823      	ldr	r3, [r4, #0]
   d4fd8:	4620      	mov	r0, r4
   d4fda:	691b      	ldr	r3, [r3, #16]
}
   d4fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d4fe0:	4718      	bx	r3
	...

000d4fe4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d4fe4:	b510      	push	{r4, lr}
   d4fe6:	4b07      	ldr	r3, [pc, #28]	; (d5004 <_ZN3UDPD1Ev+0x20>)
   d4fe8:	f103 0208 	add.w	r2, r3, #8
   d4fec:	336c      	adds	r3, #108	; 0x6c
   d4fee:	4604      	mov	r4, r0
   d4ff0:	6002      	str	r2, [r0, #0]
   d4ff2:	6103      	str	r3, [r0, #16]
   d4ff4:	f7ff fd6b 	bl	d4ace <_ZN3UDP4stopEv>
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	f7ff ff91 	bl	d4f20 <_ZN3UDP13releaseBufferEv>
   d4ffe:	4620      	mov	r0, r4
   d5000:	bd10      	pop	{r4, pc}
   d5002:	bf00      	nop
   d5004:	000d66a4 	.word	0x000d66a4

000d5008 <_ZN3UDPD0Ev>:
   d5008:	b510      	push	{r4, lr}
   d500a:	4604      	mov	r4, r0
   d500c:	f7ff ffea 	bl	d4fe4 <_ZN3UDPD1Ev>
   d5010:	4620      	mov	r0, r4
   d5012:	214c      	movs	r1, #76	; 0x4c
   d5014:	f000 ffb1 	bl	d5f7a <_ZdlPvj>
   d5018:	4620      	mov	r0, r4
   d501a:	bd10      	pop	{r4, pc}

000d501c <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d501c:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d501e:	6940      	ldr	r0, [r0, #20]
   d5020:	2800      	cmp	r0, #0
   d5022:	db04      	blt.n	d502e <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5024:	2301      	movs	r3, #1
   d5026:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d502a:	f7ff bef6 	b.w	d4e1a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d502e:	f04f 30ff 	mov.w	r0, #4294967295
   d5032:	4770      	bx	lr

000d5034 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5034:	b510      	push	{r4, lr}
   d5036:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5038:	6800      	ldr	r0, [r0, #0]
   d503a:	b108      	cbz	r0, d5040 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d503c:	f7ff fabc 	bl	d45b8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5040:	4620      	mov	r0, r4
   d5042:	bd10      	pop	{r4, pc}

000d5044 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5044:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5046:	4c06      	ldr	r4, [pc, #24]	; (d5060 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5048:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d504a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d504c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d504e:	f7ff faab 	bl	d45a8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5052:	4620      	mov	r0, r4
   d5054:	4a03      	ldr	r2, [pc, #12]	; (d5064 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5056:	4904      	ldr	r1, [pc, #16]	; (d5068 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d505c:	f000 bf88 	b.w	d5f70 <__aeabi_atexit>
   d5060:	2003e50c 	.word	0x2003e50c
   d5064:	20035bd8 	.word	0x20035bd8
   d5068:	000d5035 	.word	0x000d5035

000d506c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d506e:	4606      	mov	r6, r0
   d5070:	460d      	mov	r5, r1
   d5072:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5074:	2400      	movs	r4, #0
  while (size--) {
   d5076:	42bd      	cmp	r5, r7
   d5078:	d00c      	beq.n	d5094 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d507a:	6833      	ldr	r3, [r6, #0]
   d507c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5080:	689b      	ldr	r3, [r3, #8]
   d5082:	4630      	mov	r0, r6
   d5084:	4798      	blx	r3
     if (chunk>=0)
   d5086:	2800      	cmp	r0, #0
   d5088:	db01      	blt.n	d508e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d508a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d508c:	e7f3      	b.n	d5076 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d508e:	2c00      	cmp	r4, #0
   d5090:	bf08      	it	eq
   d5092:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5094:	4620      	mov	r0, r4
   d5096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5098 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5098:	b570      	push	{r4, r5, r6, lr}
   d509a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d509c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d509e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d50a0:	b149      	cbz	r1, d50b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d50a2:	f001 f8ff 	bl	d62a4 <strlen>
   d50a6:	682b      	ldr	r3, [r5, #0]
   d50a8:	4602      	mov	r2, r0
   d50aa:	4621      	mov	r1, r4
   d50ac:	4628      	mov	r0, r5
   d50ae:	68db      	ldr	r3, [r3, #12]
    }
   d50b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d50b4:	4718      	bx	r3
    }
   d50b6:	bd70      	pop	{r4, r5, r6, pc}

000d50b8 <_ZN5Print5printEPKc>:
   d50b8:	b508      	push	{r3, lr}
   d50ba:	f7ff ffed 	bl	d5098 <_ZN5Print5writeEPKc>
   d50be:	bd08      	pop	{r3, pc}

000d50c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d50c0:	6803      	ldr	r3, [r0, #0]
   d50c2:	689b      	ldr	r3, [r3, #8]
   d50c4:	4718      	bx	r3

000d50c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d50c8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d50cc:	f7ff fff8 	bl	d50c0 <_ZN5Print5printEc>
  n += print('\n');
   d50d0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d50d2:	4604      	mov	r4, r0
  n += print('\n');
   d50d4:	4628      	mov	r0, r5
   d50d6:	f7ff fff3 	bl	d50c0 <_ZN5Print5printEc>
  return n;
}
   d50da:	4420      	add	r0, r4
   d50dc:	bd38      	pop	{r3, r4, r5, pc}

000d50de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d50de:	b538      	push	{r3, r4, r5, lr}
   d50e0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d50e2:	f7ff ffd9 	bl	d5098 <_ZN5Print5writeEPKc>
   d50e6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d50e8:	4628      	mov	r0, r5
   d50ea:	f7ff ffec 	bl	d50c6 <_ZN5Print7printlnEv>
  return n;
}
   d50ee:	4420      	add	r0, r4
   d50f0:	bd38      	pop	{r3, r4, r5, pc}

000d50f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50f2:	b530      	push	{r4, r5, lr}
   d50f4:	b08b      	sub	sp, #44	; 0x2c
   d50f6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d50f8:	2100      	movs	r1, #0
   d50fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d50fe:	2a01      	cmp	r2, #1
   d5100:	bf98      	it	ls
   d5102:	220a      	movls	r2, #10
   d5104:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5108:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d510c:	fb05 3312 	mls	r3, r5, r2, r3
   d5110:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5114:	2b09      	cmp	r3, #9
   d5116:	bf94      	ite	ls
   d5118:	3330      	addls	r3, #48	; 0x30
   d511a:	3337      	addhi	r3, #55	; 0x37
   d511c:	b2db      	uxtb	r3, r3
   d511e:	4621      	mov	r1, r4
   d5120:	f804 3901 	strb.w	r3, [r4], #-1
   d5124:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5126:	2d00      	cmp	r5, #0
   d5128:	d1ee      	bne.n	d5108 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d512a:	f7ff ffb5 	bl	d5098 <_ZN5Print5writeEPKc>
}
   d512e:	b00b      	add	sp, #44	; 0x2c
   d5130:	bd30      	pop	{r4, r5, pc}

000d5132 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5132:	b40c      	push	{r2, r3}
   d5134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5138:	b087      	sub	sp, #28
   d513a:	af00      	add	r7, sp, #0
   d513c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5140:	4605      	mov	r5, r0
   d5142:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5146:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5148:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d514a:	4623      	mov	r3, r4
   d514c:	464a      	mov	r2, r9
   d514e:	2114      	movs	r1, #20
   d5150:	1d38      	adds	r0, r7, #4
   d5152:	f7ff fbad 	bl	d48b0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5156:	2813      	cmp	r0, #19
   d5158:	d805      	bhi.n	d5166 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d515a:	1d39      	adds	r1, r7, #4
   d515c:	4628      	mov	r0, r5
   d515e:	f7ff ff9b 	bl	d5098 <_ZN5Print5writeEPKc>
   d5162:	4604      	mov	r4, r0
   d5164:	e013      	b.n	d518e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5166:	f100 0308 	add.w	r3, r0, #8
   d516a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d516e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5170:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5174:	1c41      	adds	r1, r0, #1
   d5176:	4623      	mov	r3, r4
   d5178:	464a      	mov	r2, r9
   d517a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d517c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d517e:	f7ff fb97 	bl	d48b0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5182:	4669      	mov	r1, sp
   d5184:	4628      	mov	r0, r5
   d5186:	f7ff ff87 	bl	d5098 <_ZN5Print5writeEPKc>
   d518a:	4604      	mov	r4, r0
   d518c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d518e:	b11e      	cbz	r6, d5198 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5190:	4628      	mov	r0, r5
   d5192:	f7ff ff98 	bl	d50c6 <_ZN5Print7printlnEv>
   d5196:	4404      	add	r4, r0
    return n;
}
   d5198:	4620      	mov	r0, r4
   d519a:	371c      	adds	r7, #28
   d519c:	46bd      	mov	sp, r7
   d519e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d51a2:	b002      	add	sp, #8
   d51a4:	4770      	bx	lr
	...

000d51a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d51a8:	4b01      	ldr	r3, [pc, #4]	; (d51b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d51aa:	4a02      	ldr	r2, [pc, #8]	; (d51b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d51ac:	601a      	str	r2, [r3, #0]
   d51ae:	4770      	bx	lr
   d51b0:	2003e510 	.word	0x2003e510
   d51b4:	000d6787 	.word	0x000d6787

000d51b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d51b8:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d51ba:	681a      	ldr	r2, [r3, #0]
   d51bc:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d51be:	601a      	str	r2, [r3, #0]
   d51c0:	4770      	bx	lr
   d51c2:	bf00      	nop
   d51c4:	20035b70 	.word	0x20035b70
   d51c8:	2003e514 	.word	0x2003e514

000d51cc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51cc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d51ce:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51d0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d51d2:	b113      	cbz	r3, d51da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51d4:	2203      	movs	r2, #3
   d51d6:	4601      	mov	r1, r0
   d51d8:	4798      	blx	r3
    }
   d51da:	4620      	mov	r0, r4
   d51dc:	bd10      	pop	{r4, pc}

000d51de <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d51de:	b510      	push	{r4, lr}
   d51e0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51e2:	f7ff fff3 	bl	d51cc <_ZNSt14_Function_baseD1Ev>
   d51e6:	4620      	mov	r0, r4
   d51e8:	bd10      	pop	{r4, pc}
	...

000d51ec <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51ec:	4803      	ldr	r0, [pc, #12]	; (d51fc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d51ee:	4a04      	ldr	r2, [pc, #16]	; (d5200 <_GLOBAL__sub_I_RGB+0x14>)
   d51f0:	4904      	ldr	r1, [pc, #16]	; (d5204 <_GLOBAL__sub_I_RGB+0x18>)
   d51f2:	2300      	movs	r3, #0
   d51f4:	6083      	str	r3, [r0, #8]
   d51f6:	f000 bebb 	b.w	d5f70 <__aeabi_atexit>
   d51fa:	bf00      	nop
   d51fc:	2003e518 	.word	0x2003e518
   d5200:	20035bd8 	.word	0x20035bd8
   d5204:	000d51df 	.word	0x000d51df

000d5208 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5208:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d520a:	4b0c      	ldr	r3, [pc, #48]	; (d523c <serialEventRun+0x34>)
   d520c:	b133      	cbz	r3, d521c <serialEventRun+0x14>
   d520e:	f000 f97b 	bl	d5508 <_Z16_fetch_usbserialv>
   d5212:	6803      	ldr	r3, [r0, #0]
   d5214:	691b      	ldr	r3, [r3, #16]
   d5216:	4798      	blx	r3
   d5218:	2800      	cmp	r0, #0
   d521a:	dc09      	bgt.n	d5230 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d521c:	4b08      	ldr	r3, [pc, #32]	; (d5240 <serialEventRun+0x38>)
   d521e:	b163      	cbz	r3, d523a <serialEventRun+0x32>
   d5220:	f000 f9f8 	bl	d5614 <_Z22__fetch_global_Serial1v>
   d5224:	6803      	ldr	r3, [r0, #0]
   d5226:	691b      	ldr	r3, [r3, #16]
   d5228:	4798      	blx	r3
   d522a:	2800      	cmp	r0, #0
   d522c:	dc03      	bgt.n	d5236 <serialEventRun+0x2e>
   d522e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5230:	f3af 8000 	nop.w
   d5234:	e7f2      	b.n	d521c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5236:	f3af 8000 	nop.w
   d523a:	bd08      	pop	{r3, pc}
	...

000d5244 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5244:	b508      	push	{r3, lr}
	serialEventRun();
   d5246:	f7ff ffdf 	bl	d5208 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d524a:	f7ff f98d 	bl	d4568 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d524e:	4b01      	ldr	r3, [pc, #4]	; (d5254 <_post_loop+0x10>)
   d5250:	6018      	str	r0, [r3, #0]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	2003e74c 	.word	0x2003e74c

000d5258 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5258:	4802      	ldr	r0, [pc, #8]	; (d5264 <_Z33system_initialize_user_backup_ramv+0xc>)
   d525a:	4a03      	ldr	r2, [pc, #12]	; (d5268 <_Z33system_initialize_user_backup_ramv+0x10>)
   d525c:	4903      	ldr	r1, [pc, #12]	; (d526c <_Z33system_initialize_user_backup_ramv+0x14>)
   d525e:	1a12      	subs	r2, r2, r0
   d5260:	f000 bfe4 	b.w	d622c <memcpy>
   d5264:	2003f400 	.word	0x2003f400
   d5268:	2003f404 	.word	0x2003f404
   d526c:	000d6a50 	.word	0x000d6a50

000d5270 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5270:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5272:	2300      	movs	r3, #0
   d5274:	9300      	str	r3, [sp, #0]
   d5276:	461a      	mov	r2, r3
   d5278:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d527c:	f7ff fa9e 	bl	d47bc <system_ctrl_set_result>
}
   d5280:	b003      	add	sp, #12
   d5282:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5288 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5288:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d528a:	8843      	ldrh	r3, [r0, #2]
   d528c:	2b0a      	cmp	r3, #10
   d528e:	d008      	beq.n	d52a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5290:	2b50      	cmp	r3, #80	; 0x50
   d5292:	d109      	bne.n	d52a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5294:	4b09      	ldr	r3, [pc, #36]	; (d52bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5296:	681b      	ldr	r3, [r3, #0]
   d5298:	b13b      	cbz	r3, d52aa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d529a:	b003      	add	sp, #12
   d529c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d52a0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d52a2:	f7ff ffe5 	bl	d5270 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d52a6:	e006      	b.n	d52b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52a8:	2300      	movs	r3, #0
   d52aa:	9300      	str	r3, [sp, #0]
   d52ac:	461a      	mov	r2, r3
   d52ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52b2:	f7ff fa83 	bl	d47bc <system_ctrl_set_result>
        break;
    }
}
   d52b6:	b003      	add	sp, #12
   d52b8:	f85d fb04 	ldr.w	pc, [sp], #4
   d52bc:	2003e528 	.word	0x2003e528

000d52c0 <module_user_init_hook>:

void module_user_init_hook()
{
   d52c0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d52c2:	4c10      	ldr	r4, [pc, #64]	; (d5304 <module_user_init_hook+0x44>)
   d52c4:	4d10      	ldr	r5, [pc, #64]	; (d5308 <module_user_init_hook+0x48>)
   d52c6:	6823      	ldr	r3, [r4, #0]
   d52c8:	42ab      	cmp	r3, r5
   d52ca:	4b10      	ldr	r3, [pc, #64]	; (d530c <module_user_init_hook+0x4c>)
   d52cc:	bf0c      	ite	eq
   d52ce:	2201      	moveq	r2, #1
   d52d0:	2200      	movne	r2, #0
   d52d2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d52d4:	d002      	beq.n	d52dc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d52d6:	f7ff ffbf 	bl	d5258 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d52da:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d52dc:	f7ff f934 	bl	d4548 <HAL_RNG_GetRandomNumber>
   d52e0:	4604      	mov	r4, r0
    srand(seed);
   d52e2:	f000 ffb7 	bl	d6254 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d52e6:	4b0a      	ldr	r3, [pc, #40]	; (d5310 <module_user_init_hook+0x50>)
   d52e8:	b113      	cbz	r3, d52f0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d52ea:	4620      	mov	r0, r4
   d52ec:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d52f0:	2100      	movs	r1, #0
   d52f2:	4807      	ldr	r0, [pc, #28]	; (d5310 <module_user_init_hook+0x50>)
   d52f4:	f7ff fac4 	bl	d4880 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52f8:	2100      	movs	r1, #0
   d52fa:	4806      	ldr	r0, [pc, #24]	; (d5314 <module_user_init_hook+0x54>)
}
   d52fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5300:	f7ff ba52 	b.w	d47a8 <system_ctrl_set_app_request_handler>
   d5304:	2003f400 	.word	0x2003f400
   d5308:	9a271c1e 	.word	0x9a271c1e
   d530c:	2003e52c 	.word	0x2003e52c
   d5310:	00000000 	.word	0x00000000
   d5314:	000d5289 	.word	0x000d5289

000d5318 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5318:	4770      	bx	lr

000d531a <_ZN9IPAddressD0Ev>:
   d531a:	b510      	push	{r4, lr}
   d531c:	2118      	movs	r1, #24
   d531e:	4604      	mov	r4, r0
   d5320:	f000 fe2b 	bl	d5f7a <_ZdlPvj>
   d5324:	4620      	mov	r0, r4
   d5326:	bd10      	pop	{r4, pc}

000d5328 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5328:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d532a:	7d03      	ldrb	r3, [r0, #20]
   d532c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d532e:	b08d      	sub	sp, #52	; 0x34
   d5330:	460e      	mov	r6, r1
   d5332:	f100 0704 	add.w	r7, r0, #4
   d5336:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d533a:	d002      	beq.n	d5342 <_ZNK9IPAddress7printToER5Print+0x1a>
   d533c:	f100 0508 	add.w	r5, r0, #8
   d5340:	e018      	b.n	d5374 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5342:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5344:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5346:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d534a:	232f      	movs	r3, #47	; 0x2f
   d534c:	462a      	mov	r2, r5
   d534e:	200a      	movs	r0, #10
   d5350:	f7ff f93a 	bl	d45c8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5354:	4628      	mov	r0, r5
   d5356:	f000 ffa5 	bl	d62a4 <strlen>
   d535a:	6833      	ldr	r3, [r6, #0]
   d535c:	4602      	mov	r2, r0
   d535e:	68db      	ldr	r3, [r3, #12]
   d5360:	4629      	mov	r1, r5
   d5362:	4630      	mov	r0, r6
   d5364:	4798      	blx	r3
   d5366:	e00f      	b.n	d5388 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5368:	b124      	cbz	r4, d5374 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d536a:	212e      	movs	r1, #46	; 0x2e
   d536c:	4630      	mov	r0, r6
   d536e:	f7ff fea7 	bl	d50c0 <_ZN5Print5printEc>
   d5372:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5374:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5378:	220a      	movs	r2, #10
   d537a:	4630      	mov	r0, r6
   d537c:	f7ff feb9 	bl	d50f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5380:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5382:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5384:	d1f0      	bne.n	d5368 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5386:	4620      	mov	r0, r4
    }
    return n;
}
   d5388:	b00d      	add	sp, #52	; 0x34
   d538a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d538c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d538c:	b510      	push	{r4, lr}
   d538e:	4b05      	ldr	r3, [pc, #20]	; (d53a4 <_ZN9IPAddressC1Ev+0x18>)
   d5390:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5392:	2211      	movs	r2, #17
   d5394:	f840 3b04 	str.w	r3, [r0], #4
   d5398:	2100      	movs	r1, #0
   d539a:	f000 ff52 	bl	d6242 <memset>
{
    clear();
}
   d539e:	4620      	mov	r0, r4
   d53a0:	bd10      	pop	{r4, pc}
   d53a2:	bf00      	nop
   d53a4:	000d6820 	.word	0x000d6820

000d53a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d53a8:	4603      	mov	r3, r0
   d53aa:	4a07      	ldr	r2, [pc, #28]	; (d53c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d53ac:	b510      	push	{r4, lr}
   d53ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d53b2:	f101 0210 	add.w	r2, r1, #16
   d53b6:	f851 4b04 	ldr.w	r4, [r1], #4
   d53ba:	f843 4b04 	str.w	r4, [r3], #4
   d53be:	4291      	cmp	r1, r2
   d53c0:	d1f9      	bne.n	d53b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d53c2:	780a      	ldrb	r2, [r1, #0]
   d53c4:	701a      	strb	r2, [r3, #0]
}
   d53c6:	bd10      	pop	{r4, pc}
   d53c8:	000d6820 	.word	0x000d6820

000d53cc <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d53cc:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d53ce:	2b04      	cmp	r3, #4
   d53d0:	d101      	bne.n	d53d6 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d53d2:	6840      	ldr	r0, [r0, #4]
   d53d4:	e008      	b.n	d53e8 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d53d6:	2b06      	cmp	r3, #6
   d53d8:	d10a      	bne.n	d53f0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d53da:	6843      	ldr	r3, [r0, #4]
   d53dc:	b953      	cbnz	r3, d53f4 <_ZNK9IPAddresscvbEv+0x28>
   d53de:	6883      	ldr	r3, [r0, #8]
   d53e0:	b943      	cbnz	r3, d53f4 <_ZNK9IPAddresscvbEv+0x28>
   d53e2:	68c3      	ldr	r3, [r0, #12]
   d53e4:	b933      	cbnz	r3, d53f4 <_ZNK9IPAddresscvbEv+0x28>
   d53e6:	6900      	ldr	r0, [r0, #16]
   d53e8:	3000      	adds	r0, #0
   d53ea:	bf18      	it	ne
   d53ec:	2001      	movne	r0, #1
   d53ee:	4770      	bx	lr
    } else {
        return false;
   d53f0:	2000      	movs	r0, #0
   d53f2:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d53f4:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d53f6:	4770      	bx	lr

000d53f8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d53f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d53fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d53fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5402:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5406:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d540a:	2304      	movs	r3, #4
   d540c:	6041      	str	r1, [r0, #4]
   d540e:	7503      	strb	r3, [r0, #20]
   d5410:	bd10      	pop	{r4, pc}
	...

000d5414 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d5414:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5416:	4d04      	ldr	r5, [pc, #16]	; (d5428 <_ZN9IPAddressC1Ehhhh+0x14>)
   d5418:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d541a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d541e:	9500      	str	r5, [sp, #0]
   d5420:	f7ff ffea 	bl	d53f8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5424:	b003      	add	sp, #12
   d5426:	bd30      	pop	{r4, r5, pc}
   d5428:	000d6820 	.word	0x000d6820

000d542c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d542c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d542e:	780d      	ldrb	r5, [r1, #0]
   d5430:	788b      	ldrb	r3, [r1, #2]
   d5432:	784a      	ldrb	r2, [r1, #1]
   d5434:	78c9      	ldrb	r1, [r1, #3]
   d5436:	9100      	str	r1, [sp, #0]
   d5438:	4629      	mov	r1, r5
   d543a:	f7ff ffdd 	bl	d53f8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d543e:	b003      	add	sp, #12
   d5440:	bd30      	pop	{r4, r5, pc}

000d5442 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5442:	7441      	strb	r1, [r0, #17]
   d5444:	4770      	bx	lr

000d5446 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5446:	4770      	bx	lr

000d5448 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5448:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d544a:	2100      	movs	r1, #0
   d544c:	7c00      	ldrb	r0, [r0, #16]
   d544e:	f7ff f983 	bl	d4758 <HAL_USB_USART_Receive_Data>
}
   d5452:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5456:	bf28      	it	cs
   d5458:	f04f 30ff 	movcs.w	r0, #4294967295
   d545c:	bd08      	pop	{r3, pc}

000d545e <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d545e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5460:	2101      	movs	r1, #1
   d5462:	7c00      	ldrb	r0, [r0, #16]
   d5464:	f7ff f978 	bl	d4758 <HAL_USB_USART_Receive_Data>
}
   d5468:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d546c:	bf28      	it	cs
   d546e:	f04f 30ff 	movcs.w	r0, #4294967295
   d5472:	bd08      	pop	{r3, pc}

000d5474 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5474:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5476:	7c00      	ldrb	r0, [r0, #16]
   d5478:	f7ff f966 	bl	d4748 <HAL_USB_USART_Available_Data_For_Write>
}
   d547c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5480:	bd08      	pop	{r3, pc}

000d5482 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5482:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5484:	7c00      	ldrb	r0, [r0, #16]
   d5486:	f7ff f957 	bl	d4738 <HAL_USB_USART_Available_Data>
}
   d548a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d548e:	bd08      	pop	{r3, pc}

000d5490 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5490:	7c00      	ldrb	r0, [r0, #16]
   d5492:	f7ff b971 	b.w	d4778 <HAL_USB_USART_Flush_Data>

000d5496 <_ZN9USBSerialD0Ev>:
   d5496:	b510      	push	{r4, lr}
   d5498:	2114      	movs	r1, #20
   d549a:	4604      	mov	r4, r0
   d549c:	f000 fd6d 	bl	d5f7a <_ZdlPvj>
   d54a0:	4620      	mov	r0, r4
   d54a2:	bd10      	pop	{r4, pc}

000d54a4 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d54a4:	b538      	push	{r3, r4, r5, lr}
   d54a6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54a8:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d54aa:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54ac:	f7ff f94c 	bl	d4748 <HAL_USB_USART_Available_Data_For_Write>
   d54b0:	2800      	cmp	r0, #0
   d54b2:	dc01      	bgt.n	d54b8 <_ZN9USBSerial5writeEh+0x14>
   d54b4:	7c60      	ldrb	r0, [r4, #17]
   d54b6:	b128      	cbz	r0, d54c4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d54b8:	4629      	mov	r1, r5
   d54ba:	7c20      	ldrb	r0, [r4, #16]
   d54bc:	f7ff f954 	bl	d4768 <HAL_USB_USART_Send_Data>
   d54c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d54c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54c8:	b510      	push	{r4, lr}
   d54ca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d54cc:	2300      	movs	r3, #0
   d54ce:	6063      	str	r3, [r4, #4]
   d54d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54d4:	60a3      	str	r3, [r4, #8]
   d54d6:	4b05      	ldr	r3, [pc, #20]	; (d54ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54d8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d54da:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54dc:	4608      	mov	r0, r1
{
  _serial = serial;
   d54de:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d54e0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d54e2:	4611      	mov	r1, r2
   d54e4:	f7ff f918 	bl	d4718 <HAL_USB_USART_Init>
}
   d54e8:	4620      	mov	r0, r4
   d54ea:	bd10      	pop	{r4, pc}
   d54ec:	000d6834 	.word	0x000d6834

000d54f0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d54f0:	2200      	movs	r2, #0
   d54f2:	7c00      	ldrb	r0, [r0, #16]
   d54f4:	f7ff b918 	b.w	d4728 <HAL_USB_USART_Begin>

000d54f8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54fa:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54fc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d54fe:	2100      	movs	r1, #0
   d5500:	f000 fe9f 	bl	d6242 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5504:	4620      	mov	r0, r4
   d5506:	bd10      	pop	{r4, pc}

000d5508 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5508:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d550a:	4d0e      	ldr	r5, [pc, #56]	; (d5544 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d550c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d550e:	a801      	add	r0, sp, #4
   d5510:	f7ff fff2 	bl	d54f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5514:	6829      	ldr	r1, [r5, #0]
   d5516:	f011 0401 	ands.w	r4, r1, #1
   d551a:	d110      	bne.n	d553e <_Z16_fetch_usbserialv+0x36>
   d551c:	4628      	mov	r0, r5
   d551e:	f7fe fdc2 	bl	d40a6 <__cxa_guard_acquire>
   d5522:	b160      	cbz	r0, d553e <_Z16_fetch_usbserialv+0x36>
   d5524:	aa01      	add	r2, sp, #4
   d5526:	4621      	mov	r1, r4
   d5528:	4807      	ldr	r0, [pc, #28]	; (d5548 <_Z16_fetch_usbserialv+0x40>)
   d552a:	f7ff ffcd 	bl	d54c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d552e:	4628      	mov	r0, r5
   d5530:	f7fe fdbe 	bl	d40b0 <__cxa_guard_release>
   d5534:	4a05      	ldr	r2, [pc, #20]	; (d554c <_Z16_fetch_usbserialv+0x44>)
   d5536:	4906      	ldr	r1, [pc, #24]	; (d5550 <_Z16_fetch_usbserialv+0x48>)
   d5538:	4803      	ldr	r0, [pc, #12]	; (d5548 <_Z16_fetch_usbserialv+0x40>)
   d553a:	f000 fd19 	bl	d5f70 <__aeabi_atexit>
	return _usbserial;
}
   d553e:	4802      	ldr	r0, [pc, #8]	; (d5548 <_Z16_fetch_usbserialv+0x40>)
   d5540:	b007      	add	sp, #28
   d5542:	bd30      	pop	{r4, r5, pc}
   d5544:	2003e530 	.word	0x2003e530
   d5548:	2003e534 	.word	0x2003e534
   d554c:	20035bd8 	.word	0x20035bd8
   d5550:	000d5447 	.word	0x000d5447

000d5554 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5554:	4770      	bx	lr

000d5556 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5556:	7441      	strb	r1, [r0, #17]
   d5558:	4770      	bx	lr

000d555a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d555a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d555c:	7c00      	ldrb	r0, [r0, #16]
   d555e:	f7ff f883 	bl	d4668 <HAL_USART_Available_Data_For_Write>
}
   d5562:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5566:	bd08      	pop	{r3, pc}

000d5568 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5568:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d556a:	7c00      	ldrb	r0, [r0, #16]
   d556c:	f7ff f85c 	bl	d4628 <HAL_USART_Available_Data>
}
   d5570:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5574:	bd08      	pop	{r3, pc}

000d5576 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5576:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5578:	7c00      	ldrb	r0, [r0, #16]
   d557a:	f7ff f865 	bl	d4648 <HAL_USART_Peek_Data>
}
   d557e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5582:	bf28      	it	cs
   d5584:	f04f 30ff 	movcs.w	r0, #4294967295
   d5588:	bd08      	pop	{r3, pc}

000d558a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d558a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d558c:	7c00      	ldrb	r0, [r0, #16]
   d558e:	f7ff f853 	bl	d4638 <HAL_USART_Read_Data>
}
   d5592:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5596:	bf28      	it	cs
   d5598:	f04f 30ff 	movcs.w	r0, #4294967295
   d559c:	bd08      	pop	{r3, pc}

000d559e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d559e:	7c00      	ldrb	r0, [r0, #16]
   d55a0:	f7ff b85a 	b.w	d4658 <HAL_USART_Flush_Data>

000d55a4 <_ZN11USARTSerialD0Ev>:
   d55a4:	b510      	push	{r4, lr}
   d55a6:	2114      	movs	r1, #20
   d55a8:	4604      	mov	r4, r0
   d55aa:	f000 fce6 	bl	d5f7a <_ZdlPvj>
   d55ae:	4620      	mov	r0, r4
   d55b0:	bd10      	pop	{r4, pc}

000d55b2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d55b2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55b4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d55b6:	4604      	mov	r4, r0
   d55b8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d55ba:	b925      	cbnz	r5, d55c6 <_ZN11USARTSerial5writeEh+0x14>
   d55bc:	7c00      	ldrb	r0, [r0, #16]
   d55be:	f7ff f853 	bl	d4668 <HAL_USART_Available_Data_For_Write>
   d55c2:	2800      	cmp	r0, #0
   d55c4:	dd05      	ble.n	d55d2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d55c6:	4631      	mov	r1, r6
   d55c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d55ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d55ce:	f7ff b823 	b.w	d4618 <HAL_USART_Write_Data>
  }
  return 0;
}
   d55d2:	4628      	mov	r0, r5
   d55d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d55d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d55d8:	b510      	push	{r4, lr}
   d55da:	4604      	mov	r4, r0
   d55dc:	4608      	mov	r0, r1
   d55de:	4611      	mov	r1, r2
   d55e0:	2200      	movs	r2, #0
   d55e2:	6062      	str	r2, [r4, #4]
   d55e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55e8:	60a2      	str	r2, [r4, #8]
   d55ea:	4a05      	ldr	r2, [pc, #20]	; (d5600 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d55ec:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d55ee:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d55f0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d55f2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d55f4:	461a      	mov	r2, r3
   d55f6:	f7ff f807 	bl	d4608 <HAL_USART_Init>
}
   d55fa:	4620      	mov	r0, r4
   d55fc:	bd10      	pop	{r4, pc}
   d55fe:	bf00      	nop
   d5600:	000d6864 	.word	0x000d6864

000d5604 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d5604:	2300      	movs	r3, #0
   d5606:	7c00      	ldrb	r0, [r0, #16]
   d5608:	f7ff b836 	b.w	d4678 <HAL_USART_BeginConfig>

000d560c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d560c:	2200      	movs	r2, #0
   d560e:	f7ff bff9 	b.w	d5604 <_ZN11USARTSerial5beginEmm>
	...

000d5614 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5616:	4c19      	ldr	r4, [pc, #100]	; (d567c <_Z22__fetch_global_Serial1v+0x68>)
   d5618:	6825      	ldr	r5, [r4, #0]
   d561a:	b94d      	cbnz	r5, d5630 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d561c:	2084      	movs	r0, #132	; 0x84
   d561e:	f7fe fd3a 	bl	d4096 <_Znwj>
   d5622:	4606      	mov	r6, r0
   d5624:	b118      	cbz	r0, d562e <_Z22__fetch_global_Serial1v+0x1a>
   d5626:	2284      	movs	r2, #132	; 0x84
   d5628:	4629      	mov	r1, r5
   d562a:	f000 fe0a 	bl	d6242 <memset>
   d562e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5630:	4d13      	ldr	r5, [pc, #76]	; (d5680 <_Z22__fetch_global_Serial1v+0x6c>)
   d5632:	682e      	ldr	r6, [r5, #0]
   d5634:	b94e      	cbnz	r6, d564a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5636:	2084      	movs	r0, #132	; 0x84
   d5638:	f7fe fd2d 	bl	d4096 <_Znwj>
   d563c:	4607      	mov	r7, r0
   d563e:	b118      	cbz	r0, d5648 <_Z22__fetch_global_Serial1v+0x34>
   d5640:	2284      	movs	r2, #132	; 0x84
   d5642:	4631      	mov	r1, r6
   d5644:	f000 fdfd 	bl	d6242 <memset>
   d5648:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d564a:	4f0e      	ldr	r7, [pc, #56]	; (d5684 <_Z22__fetch_global_Serial1v+0x70>)
   d564c:	6839      	ldr	r1, [r7, #0]
   d564e:	f011 0601 	ands.w	r6, r1, #1
   d5652:	d111      	bne.n	d5678 <_Z22__fetch_global_Serial1v+0x64>
   d5654:	4638      	mov	r0, r7
   d5656:	f7fe fd26 	bl	d40a6 <__cxa_guard_acquire>
   d565a:	b168      	cbz	r0, d5678 <_Z22__fetch_global_Serial1v+0x64>
   d565c:	6822      	ldr	r2, [r4, #0]
   d565e:	682b      	ldr	r3, [r5, #0]
   d5660:	4809      	ldr	r0, [pc, #36]	; (d5688 <_Z22__fetch_global_Serial1v+0x74>)
   d5662:	4631      	mov	r1, r6
   d5664:	f7ff ffb8 	bl	d55d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5668:	4638      	mov	r0, r7
   d566a:	f7fe fd21 	bl	d40b0 <__cxa_guard_release>
   d566e:	4a07      	ldr	r2, [pc, #28]	; (d568c <_Z22__fetch_global_Serial1v+0x78>)
   d5670:	4907      	ldr	r1, [pc, #28]	; (d5690 <_Z22__fetch_global_Serial1v+0x7c>)
   d5672:	4805      	ldr	r0, [pc, #20]	; (d5688 <_Z22__fetch_global_Serial1v+0x74>)
   d5674:	f000 fc7c 	bl	d5f70 <__aeabi_atexit>
#endif
	return serial1;
}
   d5678:	4803      	ldr	r0, [pc, #12]	; (d5688 <_Z22__fetch_global_Serial1v+0x74>)
   d567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d567c:	2003e564 	.word	0x2003e564
   d5680:	2003e55c 	.word	0x2003e55c
   d5684:	2003e560 	.word	0x2003e560
   d5688:	2003e548 	.word	0x2003e548
   d568c:	20035bd8 	.word	0x20035bd8
   d5690:	000d5555 	.word	0x000d5555

000d5694 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5694:	2200      	movs	r2, #0
   d5696:	4611      	mov	r1, r2
   d5698:	6840      	ldr	r0, [r0, #4]
   d569a:	f7ff b8d1 	b.w	d4840 <network_listening>

000d569e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d569e:	2200      	movs	r2, #0
   d56a0:	4611      	mov	r1, r2
   d56a2:	6840      	ldr	r0, [r0, #4]
   d56a4:	f7ff b8dc 	b.w	d4860 <network_get_listen_timeout>

000d56a8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56a8:	2200      	movs	r2, #0
   d56aa:	6840      	ldr	r0, [r0, #4]
   d56ac:	f7ff b8d0 	b.w	d4850 <network_set_listen_timeout>

000d56b0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56b0:	2200      	movs	r2, #0
   d56b2:	f081 0101 	eor.w	r1, r1, #1
   d56b6:	6840      	ldr	r0, [r0, #4]
   d56b8:	f7ff b8ba 	b.w	d4830 <network_listen>

000d56bc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d56bc:	2300      	movs	r3, #0
   d56be:	461a      	mov	r2, r3
   d56c0:	2101      	movs	r1, #1
   d56c2:	6840      	ldr	r0, [r0, #4]
   d56c4:	f7ff b8ac 	b.w	d4820 <network_off>

000d56c8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56c8:	2300      	movs	r3, #0
   d56ca:	461a      	mov	r2, r3
   d56cc:	4619      	mov	r1, r3
   d56ce:	6840      	ldr	r0, [r0, #4]
   d56d0:	f7ff b89e 	b.w	d4810 <network_on>

000d56d4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56d4:	2200      	movs	r2, #0
   d56d6:	4611      	mov	r1, r2
   d56d8:	6840      	ldr	r0, [r0, #4]
   d56da:	f7ff b891 	b.w	d4800 <network_ready>

000d56de <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56de:	2200      	movs	r2, #0
   d56e0:	4611      	mov	r1, r2
   d56e2:	6840      	ldr	r0, [r0, #4]
   d56e4:	f7ff b87c 	b.w	d47e0 <network_connecting>

000d56e8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56e8:	2200      	movs	r2, #0
   d56ea:	2102      	movs	r1, #2
   d56ec:	6840      	ldr	r0, [r0, #4]
   d56ee:	f7ff b87f 	b.w	d47f0 <network_disconnect>

000d56f2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56f2:	2300      	movs	r3, #0
   d56f4:	461a      	mov	r2, r3
   d56f6:	6840      	ldr	r0, [r0, #4]
   d56f8:	f7ff b86a 	b.w	d47d0 <network_connect>

000d56fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d56fc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56fe:	4605      	mov	r5, r0
   d5700:	b188      	cbz	r0, d5726 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5702:	6804      	ldr	r4, [r0, #0]
   d5704:	b14c      	cbz	r4, d571a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5706:	68a3      	ldr	r3, [r4, #8]
   d5708:	b11b      	cbz	r3, d5712 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d570a:	2203      	movs	r2, #3
   d570c:	4621      	mov	r1, r4
   d570e:	4620      	mov	r0, r4
   d5710:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5712:	2110      	movs	r1, #16
   d5714:	4620      	mov	r0, r4
   d5716:	f000 fc30 	bl	d5f7a <_ZdlPvj>
   d571a:	4628      	mov	r0, r5
   d571c:	2114      	movs	r1, #20
      }
   d571e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5722:	f000 bc2a 	b.w	d5f7a <_ZdlPvj>
   d5726:	bd38      	pop	{r3, r4, r5, pc}

000d5728 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5728:	b110      	cbz	r0, d5730 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d572a:	6803      	ldr	r3, [r0, #0]
   d572c:	685b      	ldr	r3, [r3, #4]
   d572e:	4718      	bx	r3
   d5730:	4770      	bx	lr

000d5732 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5732:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5734:	6803      	ldr	r3, [r0, #0]
   d5736:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5738:	b1bb      	cbz	r3, d576a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d573a:	6858      	ldr	r0, [r3, #4]
   d573c:	f7fe ff1c 	bl	d4578 <os_thread_is_current>
   d5740:	b978      	cbnz	r0, d5762 <_ZN6ThreadD1Ev+0x30>
   d5742:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5744:	7c5a      	ldrb	r2, [r3, #17]
   d5746:	b912      	cbnz	r2, d574e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5748:	6858      	ldr	r0, [r3, #4]
   d574a:	f7fe ff1d 	bl	d4588 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d574e:	6823      	ldr	r3, [r4, #0]
   d5750:	6858      	ldr	r0, [r3, #4]
   d5752:	f7fe ff21 	bl	d4598 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5756:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5758:	2300      	movs	r3, #0
   d575a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d575c:	b128      	cbz	r0, d576a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d575e:	f7ff ffcd 	bl	d56fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5762:	6820      	ldr	r0, [r4, #0]
   d5764:	b108      	cbz	r0, d576a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5766:	f7ff ffc9 	bl	d56fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d576a:	4620      	mov	r0, r4
   d576c:	bd10      	pop	{r4, pc}

000d576e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d576e:	b538      	push	{r3, r4, r5, lr}
   d5770:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5772:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5776:	b108      	cbz	r0, d577c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5778:	f7fe fc93 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d577c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5780:	b108      	cbz	r0, d5786 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5782:	f7fe ff19 	bl	d45b8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5786:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d578a:	b135      	cbz	r5, d579a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d578c:	4628      	mov	r0, r5
   d578e:	f7ff ffd0 	bl	d5732 <_ZN6ThreadD1Ev>
   d5792:	2104      	movs	r1, #4
   d5794:	4628      	mov	r0, r5
   d5796:	f000 fbf0 	bl	d5f7a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d579a:	6820      	ldr	r0, [r4, #0]
   d579c:	b108      	cbz	r0, d57a2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d579e:	f7ff ffc3 	bl	d5728 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d57a2:	4620      	mov	r0, r4
   d57a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d57a8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d57a8:	b510      	push	{r4, lr}
   d57aa:	4b04      	ldr	r3, [pc, #16]	; (d57bc <_ZN5spark9MeshClassD1Ev+0x14>)
   d57ac:	4604      	mov	r4, r0
   d57ae:	f840 3b08 	str.w	r3, [r0], #8
   d57b2:	f7ff ffdc 	bl	d576e <_ZN5spark11MeshPublishD1Ev>
   d57b6:	4620      	mov	r0, r4
   d57b8:	bd10      	pop	{r4, pc}
   d57ba:	bf00      	nop
   d57bc:	000d6894 	.word	0x000d6894

000d57c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d57c0:	b538      	push	{r3, r4, r5, lr}
   d57c2:	4c0e      	ldr	r4, [pc, #56]	; (d57fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d57c4:	4b0e      	ldr	r3, [pc, #56]	; (d5800 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d57c6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d57c8:	2500      	movs	r5, #0
   d57ca:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d57cc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d57d0:	6063      	str	r3, [r4, #4]
   d57d2:	60a5      	str	r5, [r4, #8]
   d57d4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57d8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d57dc:	f7fe fee4 	bl	d45a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d57e0:	4b08      	ldr	r3, [pc, #32]	; (d5804 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d57e2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57e6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d57ea:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d57ec:	4620      	mov	r0, r4
   d57ee:	4a06      	ldr	r2, [pc, #24]	; (d5808 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d57f0:	4906      	ldr	r1, [pc, #24]	; (d580c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d57f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d57f6:	f000 bbbb 	b.w	d5f70 <__aeabi_atexit>
   d57fa:	bf00      	nop
   d57fc:	2003e568 	.word	0x2003e568
   d5800:	000d697c 	.word	0x000d697c
   d5804:	000d6894 	.word	0x000d6894
   d5808:	20035bd8 	.word	0x20035bd8
   d580c:	000d57a9 	.word	0x000d57a9

000d5810 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5810:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5812:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5814:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5816:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d581a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d581c:	2201      	movs	r2, #1
   d581e:	f04f 33ff 	mov.w	r3, #4294967295
   d5822:	4621      	mov	r1, r4
   d5824:	47a8      	blx	r5
}
   d5826:	b003      	add	sp, #12
   d5828:	bd30      	pop	{r4, r5, pc}

000d582a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d582a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d582c:	6803      	ldr	r3, [r0, #0]
   d582e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5830:	f04f 33ff 	mov.w	r3, #4294967295
   d5834:	46a4      	mov	ip, r4
}
   d5836:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d583a:	4760      	bx	ip

000d583c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d583c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d583e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5840:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5842:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5846:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5848:	4621      	mov	r1, r4
   d584a:	4613      	mov	r3, r2
   d584c:	2201      	movs	r2, #1
   d584e:	47a8      	blx	r5
}
   d5850:	b003      	add	sp, #12
   d5852:	bd30      	pop	{r4, r5, pc}

000d5854 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5854:	4770      	bx	lr

000d5856 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5856:	b538      	push	{r3, r4, r5, lr}
   d5858:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d585a:	681a      	ldr	r2, [r3, #0]
   d585c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d585e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5860:	da05      	bge.n	d586e <_ZN9TCPClient9connectedEv+0x18>
   d5862:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
   d5866:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
   d586a:	429a      	cmp	r2, r3
   d586c:	d001      	beq.n	d5872 <_ZN9TCPClient9connectedEv+0x1c>
   d586e:	2501      	movs	r5, #1
   d5870:	e00b      	b.n	d588a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d5872:	6803      	ldr	r3, [r0, #0]
   d5874:	691b      	ldr	r3, [r3, #16]
   d5876:	4798      	blx	r3
   d5878:	2800      	cmp	r0, #0
   d587a:	bf14      	ite	ne
   d587c:	2501      	movne	r5, #1
   d587e:	2500      	moveq	r5, #0
        if (!rv) {
   d5880:	d103      	bne.n	d588a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d5882:	6823      	ldr	r3, [r4, #0]
   d5884:	4620      	mov	r0, r4
   d5886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5888:	4798      	blx	r3
        }
    }
    return rv;
}
   d588a:	4628      	mov	r0, r5
   d588c:	bd38      	pop	{r3, r4, r5, pc}

000d588e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d588e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5890:	6818      	ldr	r0, [r3, #0]
}
   d5892:	43c0      	mvns	r0, r0
   d5894:	0fc0      	lsrs	r0, r0, #31
   d5896:	4770      	bx	lr

000d5898 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5898:	4770      	bx	lr

000d589a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d589a:	2000      	movs	r0, #0
   d589c:	4770      	bx	lr

000d589e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d589e:	b510      	push	{r4, lr}
   d58a0:	2114      	movs	r1, #20
   d58a2:	4604      	mov	r4, r0
   d58a4:	f000 fb69 	bl	d5f7a <_ZdlPvj>
   d58a8:	4620      	mov	r0, r4
   d58aa:	bd10      	pop	{r4, pc}

000d58ac <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d58ac:	f7fe bbf7 	b.w	d409e <_ZdlPv>

000d58b0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d58b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d58b2:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d58b4:	2200      	movs	r2, #0
   d58b6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d58b8:	9202      	str	r2, [sp, #8]
   d58ba:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d58bc:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d58be:	4604      	mov	r4, r0
   d58c0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d58c2:	d008      	beq.n	d58d6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d58c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d58c8:	fbb3 f1f2 	udiv	r1, r3, r2
   d58cc:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d58ce:	fb02 3111 	mls	r1, r2, r1, r3
   d58d2:	434a      	muls	r2, r1
   d58d4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d58d6:	6960      	ldr	r0, [r4, #20]
   d58d8:	2308      	movs	r3, #8
   d58da:	9300      	str	r3, [sp, #0]
   d58dc:	f241 0205 	movw	r2, #4101	; 0x1005
   d58e0:	446b      	add	r3, sp
   d58e2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d58e6:	6800      	ldr	r0, [r0, #0]
   d58e8:	f7fe fed6 	bl	d4698 <sock_setsockopt>
    if (ret < 0) {
   d58ec:	2800      	cmp	r0, #0
   d58ee:	db08      	blt.n	d5902 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d58f0:	6960      	ldr	r0, [r4, #20]
   d58f2:	2300      	movs	r3, #0
   d58f4:	4632      	mov	r2, r6
   d58f6:	4629      	mov	r1, r5
   d58f8:	6800      	ldr	r0, [r0, #0]
   d58fa:	f7fe fef5 	bl	d46e8 <sock_send>
    if (ret < 0) {
   d58fe:	2800      	cmp	r0, #0
   d5900:	da04      	bge.n	d590c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d5902:	f7fe ffdd 	bl	d48c0 <__errno>
   d5906:	6803      	ldr	r3, [r0, #0]
   d5908:	6063      	str	r3, [r4, #4]
   d590a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d590c:	b004      	add	sp, #16
   d590e:	bd70      	pop	{r4, r5, r6, pc}

000d5910 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5910:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5912:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5914:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5916:	689b      	ldr	r3, [r3, #8]
   d5918:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d591a:	68a3      	ldr	r3, [r4, #8]
   d591c:	3b01      	subs	r3, #1
   d591e:	60a3      	str	r3, [r4, #8]
   d5920:	b92b      	cbnz	r3, d592e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d5922:	6823      	ldr	r3, [r4, #0]
   d5924:	4620      	mov	r0, r4
   d5926:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d592c:	4718      	bx	r3
   d592e:	bd10      	pop	{r4, pc}

000d5930 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d5930:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5932:	4604      	mov	r4, r0
   d5934:	694d      	ldr	r5, [r1, #20]
   d5936:	4b06      	ldr	r3, [pc, #24]	; (d5950 <_ZN9TCPClient8remoteIPEv+0x20>)
   d5938:	f844 3b04 	str.w	r3, [r4], #4
   d593c:	f205 450c 	addw	r5, r5, #1036	; 0x40c
   d5940:	4606      	mov	r6, r0
   d5942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5946:	682b      	ldr	r3, [r5, #0]
   d5948:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d594a:	4630      	mov	r0, r6
   d594c:	bd70      	pop	{r4, r5, r6, pc}
   d594e:	bf00      	nop
   d5950:	000d6820 	.word	0x000d6820

000d5954 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5954:	b510      	push	{r4, lr}
   d5956:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5958:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
   d595c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
   d5960:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5962:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5964:	d005      	beq.n	d5972 <_ZN9TCPClient4peekEv+0x1e>
   d5966:	6962      	ldr	r2, [r4, #20]
   d5968:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
   d596c:	4413      	add	r3, r2
   d596e:	7918      	ldrb	r0, [r3, #4]
   d5970:	bd10      	pop	{r4, pc}
   d5972:	6803      	ldr	r3, [r0, #0]
   d5974:	691b      	ldr	r3, [r3, #16]
   d5976:	4798      	blx	r3
   d5978:	2800      	cmp	r0, #0
   d597a:	d1f4      	bne.n	d5966 <_ZN9TCPClient4peekEv+0x12>
   d597c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5980:	bd10      	pop	{r4, pc}

000d5982 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5982:	b510      	push	{r4, lr}
   d5984:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5986:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
   d598a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
   d598e:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5990:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5992:	d008      	beq.n	d59a6 <_ZN9TCPClient4readEv+0x24>
   d5994:	6962      	ldr	r2, [r4, #20]
   d5996:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
   d599a:	1c59      	adds	r1, r3, #1
   d599c:	4413      	add	r3, r2
   d599e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
   d59a2:	7918      	ldrb	r0, [r3, #4]
   d59a4:	bd10      	pop	{r4, pc}
   d59a6:	6803      	ldr	r3, [r0, #0]
   d59a8:	691b      	ldr	r3, [r3, #16]
   d59aa:	4798      	blx	r3
   d59ac:	2800      	cmp	r0, #0
   d59ae:	d1f1      	bne.n	d5994 <_ZN9TCPClient4readEv+0x12>
   d59b0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d59b4:	bd10      	pop	{r4, pc}

000d59b6 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d59b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59b8:	6943      	ldr	r3, [r0, #20]
   d59ba:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d59bc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
   d59c0:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
   d59c4:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d59c6:	4605      	mov	r5, r0
   d59c8:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d59ca:	d106      	bne.n	d59da <_ZN9TCPClient4readEPhj+0x24>
   d59cc:	6803      	ldr	r3, [r0, #0]
   d59ce:	691b      	ldr	r3, [r3, #16]
   d59d0:	4798      	blx	r3
   d59d2:	b910      	cbnz	r0, d59da <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d59d4:	f04f 34ff 	mov.w	r4, #4294967295
   d59d8:	e014      	b.n	d5a04 <_ZN9TCPClient4readEPhj+0x4e>
   d59da:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d59dc:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
   d59e0:	f8b1 4406 	ldrh.w	r4, [r1, #1030]	; 0x406
   d59e4:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d59e6:	42bc      	cmp	r4, r7
   d59e8:	bf28      	it	cs
   d59ea:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d59ec:	4419      	add	r1, r3
   d59ee:	4622      	mov	r2, r4
   d59f0:	3104      	adds	r1, #4
   d59f2:	4630      	mov	r0, r6
   d59f4:	f000 fc1a 	bl	d622c <memcpy>
   d59f8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d59fa:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
   d59fe:	4423      	add	r3, r4
   d5a00:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
    }
    return read;
}
   d5a04:	4620      	mov	r0, r4
   d5a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a08 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a0c:	4698      	mov	r8, r3
    stop();
   d5a0e:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5a10:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5a14:	460d      	mov	r5, r1
   d5a16:	4606      	mov	r6, r0
   d5a18:	4617      	mov	r7, r2
    stop();
   d5a1a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d5a1c:	ab12      	add	r3, sp, #72	; 0x48
   d5a1e:	2400      	movs	r4, #0
   d5a20:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5a24:	4622      	mov	r2, r4
   d5a26:	4621      	mov	r1, r4
   d5a28:	4628      	mov	r0, r5
   d5a2a:	f7fe fd5d 	bl	d44e8 <netdb_getaddrinfo>
   d5a2e:	4681      	mov	r9, r0
   d5a30:	2800      	cmp	r0, #0
   d5a32:	d13d      	bne.n	d5ab0 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5a34:	9b00      	ldr	r3, [sp, #0]
   d5a36:	2b00      	cmp	r3, #0
   d5a38:	d056      	beq.n	d5ae8 <_ZN9TCPClient7connectEPKctm+0xe0>
   d5a3a:	695b      	ldr	r3, [r3, #20]
   d5a3c:	2b00      	cmp	r3, #0
   d5a3e:	d053      	beq.n	d5ae8 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d5a40:	a806      	add	r0, sp, #24
   d5a42:	f7ff fca3 	bl	d538c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5a46:	9b00      	ldr	r3, [sp, #0]
   d5a48:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5a4a:	7863      	ldrb	r3, [r4, #1]
   d5a4c:	2b02      	cmp	r3, #2
   d5a4e:	d101      	bne.n	d5a54 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5a50:	1d21      	adds	r1, r4, #4
   d5a52:	e013      	b.n	d5a7c <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5a54:	2b0a      	cmp	r3, #10
   d5a56:	d114      	bne.n	d5a82 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5a58:	2211      	movs	r2, #17
   d5a5a:	4649      	mov	r1, r9
   d5a5c:	a801      	add	r0, sp, #4
   d5a5e:	f000 fbf0 	bl	d6242 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5a62:	68a3      	ldr	r3, [r4, #8]
   d5a64:	bb33      	cbnz	r3, d5ab4 <_ZN9TCPClient7connectEPKctm+0xac>
   d5a66:	68e3      	ldr	r3, [r4, #12]
   d5a68:	bb23      	cbnz	r3, d5ab4 <_ZN9TCPClient7connectEPKctm+0xac>
   d5a6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5a6e:	6925      	ldr	r5, [r4, #16]
   d5a70:	f7fe fdb2 	bl	d45d8 <inet_htonl>
   d5a74:	4285      	cmp	r5, r0
   d5a76:	d11d      	bne.n	d5ab4 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5a78:	f104 0114 	add.w	r1, r4, #20
   d5a7c:	a806      	add	r0, sp, #24
   d5a7e:	f7ff fcd5 	bl	d542c <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5a82:	a806      	add	r0, sp, #24
   d5a84:	f7ff fca2 	bl	d53cc <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5a88:	2800      	cmp	r0, #0
   d5a8a:	d02d      	beq.n	d5ae8 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d5a8c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5a8e:	ad07      	add	r5, sp, #28
   d5a90:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5a94:	4b18      	ldr	r3, [pc, #96]	; (d5af8 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d5a96:	930c      	str	r3, [sp, #48]	; 0x30
   d5a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a9a:	ac0d      	add	r4, sp, #52	; 0x34
   d5a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a9e:	682b      	ldr	r3, [r5, #0]
   d5aa0:	7023      	strb	r3, [r4, #0]
   d5aa2:	463a      	mov	r2, r7
   d5aa4:	4643      	mov	r3, r8
   d5aa6:	a90c      	add	r1, sp, #48	; 0x30
   d5aa8:	4630      	mov	r0, r6
   d5aaa:	47c8      	blx	r9
   d5aac:	4681      	mov	r9, r0
   d5aae:	e01b      	b.n	d5ae8 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5ab0:	46a1      	mov	r9, r4
   d5ab2:	e019      	b.n	d5ae8 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ab4:	f104 0308 	add.w	r3, r4, #8
   d5ab8:	ad01      	add	r5, sp, #4
   d5aba:	3418      	adds	r4, #24
   d5abc:	6818      	ldr	r0, [r3, #0]
   d5abe:	6859      	ldr	r1, [r3, #4]
   d5ac0:	462a      	mov	r2, r5
   d5ac2:	c203      	stmia	r2!, {r0, r1}
   d5ac4:	3308      	adds	r3, #8
   d5ac6:	42a3      	cmp	r3, r4
   d5ac8:	4615      	mov	r5, r2
   d5aca:	d1f7      	bne.n	d5abc <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d5acc:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5ace:	a901      	add	r1, sp, #4
   d5ad0:	a80c      	add	r0, sp, #48	; 0x30
   d5ad2:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5ad4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5ad8:	f7ff fc66 	bl	d53a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ade:	ac07      	add	r4, sp, #28
   d5ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ae2:	682b      	ldr	r3, [r5, #0]
   d5ae4:	7023      	strb	r3, [r4, #0]
   d5ae6:	e7cc      	b.n	d5a82 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5ae8:	9800      	ldr	r0, [sp, #0]
   d5aea:	f7fe fcf5 	bl	d44d8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d5aee:	4648      	mov	r0, r9
   d5af0:	b013      	add	sp, #76	; 0x4c
   d5af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5af6:	bf00      	nop
   d5af8:	000d6820 	.word	0x000d6820

000d5afc <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5afc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5afe:	2300      	movs	r3, #0
   d5b00:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
   d5b04:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5b06:	f8a2 3406 	strh.w	r3, [r2, #1030]	; 0x406
   d5b0a:	4770      	bx	lr

000d5b0c <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b10:	461e      	mov	r6, r3
    stop();
   d5b12:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5b14:	460c      	mov	r4, r1
   d5b16:	b08a      	sub	sp, #40	; 0x28
    stop();
   d5b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5b1a:	4605      	mov	r5, r0
   d5b1c:	4617      	mov	r7, r2
    stop();
   d5b1e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5b20:	7d23      	ldrb	r3, [r4, #20]
   d5b22:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d5b26:	2b04      	cmp	r3, #4
   d5b28:	bf0c      	ite	eq
   d5b2a:	2002      	moveq	r0, #2
   d5b2c:	200a      	movne	r0, #10
   d5b2e:	2206      	movs	r2, #6
   d5b30:	2101      	movs	r1, #1
   d5b32:	f7fe fde9 	bl	d4708 <sock_socket>
   d5b36:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d5b3a:	696b      	ldr	r3, [r5, #20]
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	2b00      	cmp	r3, #0
   d5b40:	db18      	blt.n	d5b74 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d5b42:	4628      	mov	r0, r5
   d5b44:	f7ff ffda 	bl	d5afc <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5b48:	b1d6      	cbz	r6, d5b80 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d5b4a:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5b4c:	a903      	add	r1, sp, #12
   d5b4e:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d5b50:	9303      	str	r3, [sp, #12]
   d5b52:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5b56:	f7fe fcd7 	bl	d4508 <if_index_to_name>
   d5b5a:	b958      	cbnz	r0, d5b74 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5b5c:	6968      	ldr	r0, [r5, #20]
   d5b5e:	2306      	movs	r3, #6
   d5b60:	9300      	str	r3, [sp, #0]
   d5b62:	f241 020b 	movw	r2, #4107	; 0x100b
   d5b66:	ab03      	add	r3, sp, #12
   d5b68:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5b6c:	6800      	ldr	r0, [r0, #0]
   d5b6e:	f7fe fd93 	bl	d4698 <sock_setsockopt>
   d5b72:	b128      	cbz	r0, d5b80 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5b74:	682b      	ldr	r3, [r5, #0]
   d5b76:	4628      	mov	r0, r5
   d5b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5b7a:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5b7c:	4798      	blx	r3
   d5b7e:	e03c      	b.n	d5bfa <_ZN9TCPClient7connectE9IPAddresstm+0xee>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5b80:	261c      	movs	r6, #28
   d5b82:	4632      	mov	r2, r6
   d5b84:	2100      	movs	r1, #0
   d5b86:	a803      	add	r0, sp, #12
   d5b88:	f000 fb5b 	bl	d6242 <memset>
    if (ip.version() == 4) {
   d5b8c:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5b8e:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5b92:	2b04      	cmp	r3, #4
   d5b94:	d10c      	bne.n	d5bb0 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5b96:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d5b98:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5b9a:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5b9e:	f7fe fd2b 	bl	d45f8 <inet_htons>
   d5ba2:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5ba6:	6860      	ldr	r0, [r4, #4]
   d5ba8:	f7fe fd16 	bl	d45d8 <inet_htonl>
   d5bac:	9004      	str	r0, [sp, #16]
   d5bae:	e013      	b.n	d5bd8 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5bb0:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5bb2:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5bb4:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d5bb8:	f7fe fd1e 	bl	d45f8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5bbc:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d5bbe:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5bc2:	1d23      	adds	r3, r4, #4
   d5bc4:	f104 0714 	add.w	r7, r4, #20
   d5bc8:	6818      	ldr	r0, [r3, #0]
   d5bca:	6859      	ldr	r1, [r3, #4]
   d5bcc:	4632      	mov	r2, r6
   d5bce:	c203      	stmia	r2!, {r0, r1}
   d5bd0:	3308      	adds	r3, #8
   d5bd2:	42bb      	cmp	r3, r7
   d5bd4:	4616      	mov	r6, r2
   d5bd6:	d1f7      	bne.n	d5bc8 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5bd8:	696b      	ldr	r3, [r5, #20]
   d5bda:	221c      	movs	r2, #28
   d5bdc:	a903      	add	r1, sp, #12
   d5bde:	6818      	ldr	r0, [r3, #0]
   d5be0:	f7fe fd6a 	bl	d46b8 <sock_connect>
   d5be4:	2800      	cmp	r0, #0
   d5be6:	d1c5      	bne.n	d5b74 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d5be8:	3404      	adds	r4, #4
   d5bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5bec:	696d      	ldr	r5, [r5, #20]
   d5bee:	f205 450c 	addw	r5, r5, #1036	; 0x40c
   d5bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5bf4:	6823      	ldr	r3, [r4, #0]
   d5bf6:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d5bf8:	2401      	movs	r4, #1
}
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	b00a      	add	sp, #40	; 0x28
   d5bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5c02 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5c02:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5c04:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5c06:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5c08:	6818      	ldr	r0, [r3, #0]
   d5c0a:	2800      	cmp	r0, #0
   d5c0c:	db01      	blt.n	d5c12 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5c0e:	f7fe fd4b 	bl	d46a8 <sock_close>
   d5c12:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5c14:	f04f 32ff 	mov.w	r2, #4294967295
   d5c18:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c1a:	6960      	ldr	r0, [r4, #20]
   d5c1c:	2211      	movs	r2, #17
   d5c1e:	2100      	movs	r1, #0
   d5c20:	f200 400c 	addw	r0, r0, #1036	; 0x40c
   d5c24:	f000 fb0d 	bl	d6242 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d5c28:	4620      	mov	r0, r4
}
   d5c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d5c2e:	f7ff bf65 	b.w	d5afc <_ZN9TCPClient12flush_bufferEv>
	...

000d5c34 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5c34:	b530      	push	{r4, r5, lr}
   d5c36:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5c38:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5c3c:	b08b      	sub	sp, #44	; 0x2c
   d5c3e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5c40:	b11b      	cbz	r3, d5c4a <_ZN9TCPClient9availableEv+0x16>
   d5c42:	f8b2 2404 	ldrh.w	r2, [r2, #1028]	; 0x404
   d5c46:	429a      	cmp	r2, r3
   d5c48:	d041      	beq.n	d5cce <_ZN9TCPClient9availableEv+0x9a>
   d5c4a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d5c4c:	6818      	ldr	r0, [r3, #0]
   d5c4e:	2800      	cmp	r0, #0
   d5c50:	db40      	blt.n	d5cd4 <_ZN9TCPClient9availableEv+0xa0>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d5c52:	f8b3 5406 	ldrh.w	r5, [r3, #1030]	; 0x406
   d5c56:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5c5a:	d23b      	bcs.n	d5cd4 <_ZN9TCPClient9availableEv+0xa0>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5c5c:	1d19      	adds	r1, r3, #4
   d5c5e:	f5c5 6280 	rsb	r2, r5, #1024	; 0x400
   d5c62:	2308      	movs	r3, #8
   d5c64:	4429      	add	r1, r5
   d5c66:	f7fe fd2f 	bl	d46c8 <sock_recv>
            if (ret > 0) {
   d5c6a:	2800      	cmp	r0, #0
   d5c6c:	dd0c      	ble.n	d5c88 <_ZN9TCPClient9availableEv+0x54>
   d5c6e:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5c70:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
   d5c74:	b90a      	cbnz	r2, d5c7a <_ZN9TCPClient9availableEv+0x46>
                    d_->offset = 0;
   d5c76:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
   d5c7a:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d5c7c:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
   d5c80:	4418      	add	r0, r3
   d5c82:	f8a2 0406 	strh.w	r0, [r2, #1030]	; 0x406
   d5c86:	e025      	b.n	d5cd4 <_ZN9TCPClient9availableEv+0xa0>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5c88:	f7fe fe1a 	bl	d48c0 <__errno>
   d5c8c:	6803      	ldr	r3, [r0, #0]
   d5c8e:	2b0b      	cmp	r3, #11
   d5c90:	d020      	beq.n	d5cd4 <_ZN9TCPClient9availableEv+0xa0>
   d5c92:	f7fe fe15 	bl	d48c0 <__errno>
   d5c96:	6803      	ldr	r3, [r0, #0]
   d5c98:	2b0b      	cmp	r3, #11
   d5c9a:	d01b      	beq.n	d5cd4 <_ZN9TCPClient9availableEv+0xa0>
                    LOG(ERROR, "recv error = %d", errno);
   d5c9c:	2320      	movs	r3, #32
   d5c9e:	2500      	movs	r5, #0
   d5ca0:	9302      	str	r3, [sp, #8]
   d5ca2:	9503      	str	r5, [sp, #12]
   d5ca4:	f7fe fe0c 	bl	d48c0 <__errno>
   d5ca8:	6803      	ldr	r3, [r0, #0]
   d5caa:	9301      	str	r3, [sp, #4]
   d5cac:	4b0d      	ldr	r3, [pc, #52]	; (d5ce4 <_ZN9TCPClient9availableEv+0xb0>)
   d5cae:	9300      	str	r3, [sp, #0]
   d5cb0:	aa02      	add	r2, sp, #8
   d5cb2:	462b      	mov	r3, r5
   d5cb4:	490c      	ldr	r1, [pc, #48]	; (d5ce8 <_ZN9TCPClient9availableEv+0xb4>)
   d5cb6:	2032      	movs	r0, #50	; 0x32
   d5cb8:	f7fe fd66 	bl	d4788 <log_message>
                    sock_close(d_->sock);
   d5cbc:	6963      	ldr	r3, [r4, #20]
   d5cbe:	6818      	ldr	r0, [r3, #0]
   d5cc0:	f7fe fcf2 	bl	d46a8 <sock_close>
   d5cc4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5cc6:	f04f 32ff 	mov.w	r2, #4294967295
   d5cca:	601a      	str	r2, [r3, #0]
   d5ccc:	e002      	b.n	d5cd4 <_ZN9TCPClient9availableEv+0xa0>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d5cce:	f7ff ff15 	bl	d5afc <_ZN9TCPClient12flush_bufferEv>
   d5cd2:	e7ba      	b.n	d5c4a <_ZN9TCPClient9availableEv+0x16>
   d5cd4:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d5cd6:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
   d5cda:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	; 0x404
   d5cde:	1a18      	subs	r0, r3, r0
}
   d5ce0:	b00b      	add	sp, #44	; 0x2c
   d5ce2:	bd30      	pop	{r4, r5, pc}
   d5ce4:	000d692f 	.word	0x000d692f
   d5ce8:	000d6928 	.word	0x000d6928

000d5cec <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5cec:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5cee:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5cf0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d5cf2:	6001      	str	r1, [r0, #0]
   d5cf4:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
   d5cf8:	f8a0 3406 	strh.w	r3, [r0, #1030]	; 0x406
   d5cfc:	f500 6081 	add.w	r0, r0, #1032	; 0x408
   d5d00:	f7ff fb44 	bl	d538c <_ZN9IPAddressC1Ev>
}
   d5d04:	4620      	mov	r0, r4
   d5d06:	bd10      	pop	{r4, pc}

000d5d08 <_ZN9TCPClientC1Ei>:
   d5d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5d0c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d0e:	2300      	movs	r3, #0
   d5d10:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d5d12:	4a15      	ldr	r2, [pc, #84]	; (d5d68 <_ZN9TCPClientC1Ei+0x60>)
   d5d14:	6043      	str	r3, [r0, #4]
   d5d16:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5d18:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d1a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5d1c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5d1e:	f44f 6084 	mov.w	r0, #1056	; 0x420
   d5d22:	460e      	mov	r6, r1
   d5d24:	f7fe f9b7 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5d28:	4605      	mov	r5, r0
   d5d2a:	b110      	cbz	r0, d5d32 <_ZN9TCPClientC1Ei+0x2a>
   d5d2c:	4631      	mov	r1, r6
   d5d2e:	f7ff ffdd 	bl	d5cec <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5d32:	2014      	movs	r0, #20
   d5d34:	f7fe f9af 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5d38:	4603      	mov	r3, r0
   d5d3a:	b128      	cbz	r0, d5d48 <_ZN9TCPClientC1Ei+0x40>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5d3c:	2201      	movs	r2, #1
   d5d3e:	6042      	str	r2, [r0, #4]
   d5d40:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5d42:	4a0a      	ldr	r2, [pc, #40]	; (d5d6c <_ZN9TCPClientC1Ei+0x64>)
   d5d44:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5d46:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5d48:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5d4a:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5d4c:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5d4e:	b128      	cbz	r0, d5d5c <_ZN9TCPClientC1Ei+0x54>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5d50:	6843      	ldr	r3, [r0, #4]
   d5d52:	3b01      	subs	r3, #1
   d5d54:	6043      	str	r3, [r0, #4]
   d5d56:	b90b      	cbnz	r3, d5d5c <_ZN9TCPClientC1Ei+0x54>
   d5d58:	f7ff fdda 	bl	d5910 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	f7ff fecd 	bl	d5afc <_ZN9TCPClient12flush_bufferEv>
}
   d5d62:	4620      	mov	r0, r4
   d5d64:	bd70      	pop	{r4, r5, r6, pc}
   d5d66:	bf00      	nop
   d5d68:	000d68e4 	.word	0x000d68e4
   d5d6c:	000d68c8 	.word	0x000d68c8

000d5d70 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d5d70:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d5d72:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d5d76:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d5d78:	f7ff ffc6 	bl	d5d08 <_ZN9TCPClientC1Ei>
}
   d5d7c:	4620      	mov	r0, r4
   d5d7e:	bd10      	pop	{r4, pc}

000d5d80 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d5d80:	b510      	push	{r4, lr}
   d5d82:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5d84:	6800      	ldr	r0, [r0, #0]
   d5d86:	2800      	cmp	r0, #0
   d5d88:	db01      	blt.n	d5d8e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d5d8a:	f7fe fc8d 	bl	d46a8 <sock_close>
    }
}
   d5d8e:	4620      	mov	r0, r4
   d5d90:	bd10      	pop	{r4, pc}

000d5d92 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5d92:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5d94:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d5d96:	4620      	mov	r0, r4
   d5d98:	f7ff fff2 	bl	d5d80 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d5d9c:	b124      	cbz	r4, d5da8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5d9e:	4620      	mov	r0, r4
   d5da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5da4:	f7fe b97b 	b.w	d409e <_ZdlPv>
   d5da8:	bd10      	pop	{r4, pc}

000d5daa <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5daa:	2200      	movs	r2, #0
   d5dac:	4611      	mov	r1, r2
   d5dae:	6840      	ldr	r0, [r0, #4]
   d5db0:	f7fe bd26 	b.w	d4800 <network_ready>

000d5db4 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5db4:	2200      	movs	r2, #0
   d5db6:	4611      	mov	r1, r2
   d5db8:	6840      	ldr	r0, [r0, #4]
   d5dba:	f7fe bd41 	b.w	d4840 <network_listening>

000d5dbe <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5dbe:	2200      	movs	r2, #0
   d5dc0:	4611      	mov	r1, r2
   d5dc2:	6840      	ldr	r0, [r0, #4]
   d5dc4:	f7fe bd4c 	b.w	d4860 <network_get_listen_timeout>

000d5dc8 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5dc8:	2200      	movs	r2, #0
   d5dca:	6840      	ldr	r0, [r0, #4]
   d5dcc:	f7fe bd40 	b.w	d4850 <network_set_listen_timeout>

000d5dd0 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dd0:	2200      	movs	r2, #0
   d5dd2:	f081 0101 	eor.w	r1, r1, #1
   d5dd6:	6840      	ldr	r0, [r0, #4]
   d5dd8:	f7fe bd2a 	b.w	d4830 <network_listen>

000d5ddc <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5ddc:	2300      	movs	r3, #0
   d5dde:	461a      	mov	r2, r3
   d5de0:	4619      	mov	r1, r3
   d5de2:	6840      	ldr	r0, [r0, #4]
   d5de4:	f7fe bd1c 	b.w	d4820 <network_off>

000d5de8 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5de8:	2300      	movs	r3, #0
   d5dea:	461a      	mov	r2, r3
   d5dec:	4619      	mov	r1, r3
   d5dee:	6840      	ldr	r0, [r0, #4]
   d5df0:	f7fe bd0e 	b.w	d4810 <network_on>

000d5df4 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5df4:	2200      	movs	r2, #0
   d5df6:	4611      	mov	r1, r2
   d5df8:	6840      	ldr	r0, [r0, #4]
   d5dfa:	f7fe bcf1 	b.w	d47e0 <network_connecting>

000d5dfe <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5dfe:	2200      	movs	r2, #0
   d5e00:	2102      	movs	r1, #2
   d5e02:	6840      	ldr	r0, [r0, #4]
   d5e04:	f7fe bcf4 	b.w	d47f0 <network_disconnect>

000d5e08 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e08:	2300      	movs	r3, #0
   d5e0a:	461a      	mov	r2, r3
   d5e0c:	6840      	ldr	r0, [r0, #4]
   d5e0e:	f7fe bcdf 	b.w	d47d0 <network_connect>
	...

000d5e14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5e14:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5e16:	2204      	movs	r2, #4
   d5e18:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5e1a:	4a02      	ldr	r2, [pc, #8]	; (d5e24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5e1c:	601a      	str	r2, [r3, #0]
   d5e1e:	4770      	bx	lr
   d5e20:	2003e73c 	.word	0x2003e73c
   d5e24:	000d6948 	.word	0x000d6948

000d5e28 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5e28:	2300      	movs	r3, #0
   d5e2a:	461a      	mov	r2, r3
   d5e2c:	6840      	ldr	r0, [r0, #4]
   d5e2e:	f7fe bccf 	b.w	d47d0 <network_connect>

000d5e32 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5e32:	2200      	movs	r2, #0
   d5e34:	2102      	movs	r1, #2
   d5e36:	6840      	ldr	r0, [r0, #4]
   d5e38:	f7fe bcda 	b.w	d47f0 <network_disconnect>

000d5e3c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5e3c:	2200      	movs	r2, #0
   d5e3e:	4611      	mov	r1, r2
   d5e40:	6840      	ldr	r0, [r0, #4]
   d5e42:	f7fe bccd 	b.w	d47e0 <network_connecting>

000d5e46 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5e46:	2200      	movs	r2, #0
   d5e48:	4611      	mov	r1, r2
   d5e4a:	6840      	ldr	r0, [r0, #4]
   d5e4c:	f7fe bcd8 	b.w	d4800 <network_ready>

000d5e50 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e50:	2300      	movs	r3, #0
   d5e52:	461a      	mov	r2, r3
   d5e54:	4619      	mov	r1, r3
   d5e56:	6840      	ldr	r0, [r0, #4]
   d5e58:	f7fe bcda 	b.w	d4810 <network_on>

000d5e5c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5e5c:	2300      	movs	r3, #0
   d5e5e:	461a      	mov	r2, r3
   d5e60:	4619      	mov	r1, r3
   d5e62:	6840      	ldr	r0, [r0, #4]
   d5e64:	f7fe bcdc 	b.w	d4820 <network_off>

000d5e68 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5e68:	2200      	movs	r2, #0
   d5e6a:	f081 0101 	eor.w	r1, r1, #1
   d5e6e:	6840      	ldr	r0, [r0, #4]
   d5e70:	f7fe bcde 	b.w	d4830 <network_listen>

000d5e74 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5e74:	2200      	movs	r2, #0
   d5e76:	6840      	ldr	r0, [r0, #4]
   d5e78:	f7fe bcea 	b.w	d4850 <network_set_listen_timeout>

000d5e7c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e7c:	2200      	movs	r2, #0
   d5e7e:	4611      	mov	r1, r2
   d5e80:	6840      	ldr	r0, [r0, #4]
   d5e82:	f7fe bced 	b.w	d4860 <network_get_listen_timeout>

000d5e86 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e86:	2200      	movs	r2, #0
   d5e88:	4611      	mov	r1, r2
   d5e8a:	6840      	ldr	r0, [r0, #4]
   d5e8c:	f7fe bcd8 	b.w	d4840 <network_listening>

000d5e90 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e94:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e96:	b095      	sub	sp, #84	; 0x54
   d5e98:	4616      	mov	r6, r2
   d5e9a:	460d      	mov	r5, r1
   d5e9c:	4607      	mov	r7, r0
    IPAddress addr;
   d5e9e:	f7ff fa75 	bl	d538c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5ea2:	4621      	mov	r1, r4
   d5ea4:	2220      	movs	r2, #32
   d5ea6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ea8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5eaa:	f000 f9ca 	bl	d6242 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5eae:	2340      	movs	r3, #64	; 0x40
   d5eb0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5eb2:	4621      	mov	r1, r4
   d5eb4:	466b      	mov	r3, sp
   d5eb6:	aa0c      	add	r2, sp, #48	; 0x30
   d5eb8:	4630      	mov	r0, r6
   d5eba:	f7fe fb15 	bl	d44e8 <netdb_getaddrinfo>
    if (!r) {
   d5ebe:	4604      	mov	r4, r0
   d5ec0:	2800      	cmp	r0, #0
   d5ec2:	d144      	bne.n	d5f4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ec4:	4602      	mov	r2, r0
   d5ec6:	2101      	movs	r1, #1
   d5ec8:	6868      	ldr	r0, [r5, #4]
   d5eca:	f7fe fc99 	bl	d4800 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ece:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ed0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ed2:	4622      	mov	r2, r4
   d5ed4:	6868      	ldr	r0, [r5, #4]
   d5ed6:	f7fe fc93 	bl	d4800 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5eda:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5edc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5ede:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ee0:	2e00      	cmp	r6, #0
   d5ee2:	d034      	beq.n	d5f4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5ee4:	2900      	cmp	r1, #0
   d5ee6:	d132      	bne.n	d5f4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ee8:	6873      	ldr	r3, [r6, #4]
   d5eea:	2b02      	cmp	r3, #2
   d5eec:	d002      	beq.n	d5ef4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5eee:	2b0a      	cmp	r3, #10
   d5ef0:	d009      	beq.n	d5f06 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5ef2:	e02a      	b.n	d5f4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ef4:	f1b8 0f00 	cmp.w	r8, #0
   d5ef8:	d027      	beq.n	d5f4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5efa:	6971      	ldr	r1, [r6, #20]
   d5efc:	4638      	mov	r0, r7
   d5efe:	3104      	adds	r1, #4
   d5f00:	f7ff fa94 	bl	d542c <_ZN9IPAddressaSEPKh>
   d5f04:	e020      	b.n	d5f48 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5f06:	f1b9 0f00 	cmp.w	r9, #0
   d5f0a:	d01e      	beq.n	d5f4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5f0c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5f0e:	2211      	movs	r2, #17
   d5f10:	a801      	add	r0, sp, #4
   d5f12:	f000 f996 	bl	d6242 <memset>
                    a.v = 6;
   d5f16:	2306      	movs	r3, #6
   d5f18:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5f1c:	ad01      	add	r5, sp, #4
   d5f1e:	f104 0308 	add.w	r3, r4, #8
   d5f22:	3418      	adds	r4, #24
   d5f24:	6818      	ldr	r0, [r3, #0]
   d5f26:	6859      	ldr	r1, [r3, #4]
   d5f28:	462a      	mov	r2, r5
   d5f2a:	c203      	stmia	r2!, {r0, r1}
   d5f2c:	3308      	adds	r3, #8
   d5f2e:	42a3      	cmp	r3, r4
   d5f30:	4615      	mov	r5, r2
   d5f32:	d1f7      	bne.n	d5f24 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5f34:	a901      	add	r1, sp, #4
   d5f36:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f38:	ad07      	add	r5, sp, #28
   d5f3a:	f7ff fa35 	bl	d53a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f40:	1d3c      	adds	r4, r7, #4
   d5f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f44:	682b      	ldr	r3, [r5, #0]
   d5f46:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5f48:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f4a:	69f6      	ldr	r6, [r6, #28]
   d5f4c:	e7c8      	b.n	d5ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5f4e:	9800      	ldr	r0, [sp, #0]
   d5f50:	f7fe fac2 	bl	d44d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5f54:	4638      	mov	r0, r7
   d5f56:	b015      	add	sp, #84	; 0x54
   d5f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5f5c:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5f5e:	4a03      	ldr	r2, [pc, #12]	; (d5f6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5f60:	601a      	str	r2, [r3, #0]
   d5f62:	2200      	movs	r2, #0
   d5f64:	605a      	str	r2, [r3, #4]
   d5f66:	4770      	bx	lr
   d5f68:	2003e744 	.word	0x2003e744
   d5f6c:	000d697c 	.word	0x000d697c

000d5f70 <__aeabi_atexit>:
   d5f70:	460b      	mov	r3, r1
   d5f72:	4601      	mov	r1, r0
   d5f74:	4618      	mov	r0, r3
   d5f76:	f000 b94b 	b.w	d6210 <__cxa_atexit>

000d5f7a <_ZdlPvj>:
   d5f7a:	f7fe b890 	b.w	d409e <_ZdlPv>
	...

000d5f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f80:	4b18      	ldr	r3, [pc, #96]	; (d5fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d1      	lsls	r1, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4b16      	ldr	r3, [pc, #88]	; (d5fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f8e:	681a      	ldr	r2, [r3, #0]
   d5f90:	07d2      	lsls	r2, r2, #31
   d5f92:	bf5c      	itt	pl
   d5f94:	2201      	movpl	r2, #1
   d5f96:	601a      	strpl	r2, [r3, #0]
   d5f98:	4b14      	ldr	r3, [pc, #80]	; (d5fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f9a:	681a      	ldr	r2, [r3, #0]
   d5f9c:	07d0      	lsls	r0, r2, #31
   d5f9e:	bf5c      	itt	pl
   d5fa0:	2201      	movpl	r2, #1
   d5fa2:	601a      	strpl	r2, [r3, #0]
   d5fa4:	4b12      	ldr	r3, [pc, #72]	; (d5ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d1      	lsls	r1, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b10      	ldr	r3, [pc, #64]	; (d5ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d2      	lsls	r2, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b0e      	ldr	r3, [pc, #56]	; (d5ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d0      	lsls	r0, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b0c      	ldr	r3, [pc, #48]	; (d5ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d1      	lsls	r1, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4b0a      	ldr	r3, [pc, #40]	; (d6000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5fd6:	681a      	ldr	r2, [r3, #0]
   d5fd8:	07d2      	lsls	r2, r2, #31
   d5fda:	bf5c      	itt	pl
   d5fdc:	2201      	movpl	r2, #1
   d5fde:	601a      	strpl	r2, [r3, #0]
   d5fe0:	4770      	bx	lr
   d5fe2:	bf00      	nop
   d5fe4:	2003e76c 	.word	0x2003e76c
   d5fe8:	2003e768 	.word	0x2003e768
   d5fec:	2003e764 	.word	0x2003e764
   d5ff0:	2003e760 	.word	0x2003e760
   d5ff4:	2003e75c 	.word	0x2003e75c
   d5ff8:	2003e758 	.word	0x2003e758
   d5ffc:	2003e754 	.word	0x2003e754
   d6000:	2003e750 	.word	0x2003e750

000d6004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6004:	4b24      	ldr	r3, [pc, #144]	; (d6098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d0      	lsls	r0, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b22      	ldr	r3, [pc, #136]	; (d609c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d1      	lsls	r1, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b20      	ldr	r3, [pc, #128]	; (d60a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d2      	lsls	r2, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b1e      	ldr	r3, [pc, #120]	; (d60a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d0      	lsls	r0, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4b1c      	ldr	r3, [pc, #112]	; (d60a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d1      	lsls	r1, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b1a      	ldr	r3, [pc, #104]	; (d60ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d2      	lsls	r2, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4b18      	ldr	r3, [pc, #96]	; (d60b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d604e:	681a      	ldr	r2, [r3, #0]
   d6050:	07d0      	lsls	r0, r2, #31
   d6052:	bf5c      	itt	pl
   d6054:	2201      	movpl	r2, #1
   d6056:	601a      	strpl	r2, [r3, #0]
   d6058:	4b16      	ldr	r3, [pc, #88]	; (d60b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d1      	lsls	r1, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b14      	ldr	r3, [pc, #80]	; (d60b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d2      	lsls	r2, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4b12      	ldr	r3, [pc, #72]	; (d60bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	07d0      	lsls	r0, r2, #31
   d6076:	bf5c      	itt	pl
   d6078:	2201      	movpl	r2, #1
   d607a:	601a      	strpl	r2, [r3, #0]
   d607c:	4b10      	ldr	r3, [pc, #64]	; (d60c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d607e:	681a      	ldr	r2, [r3, #0]
   d6080:	07d1      	lsls	r1, r2, #31
   d6082:	bf5c      	itt	pl
   d6084:	2201      	movpl	r2, #1
   d6086:	601a      	strpl	r2, [r3, #0]
   d6088:	4b0e      	ldr	r3, [pc, #56]	; (d60c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d608a:	681a      	ldr	r2, [r3, #0]
   d608c:	07d2      	lsls	r2, r2, #31
   d608e:	bf5c      	itt	pl
   d6090:	2201      	movpl	r2, #1
   d6092:	601a      	strpl	r2, [r3, #0]
   d6094:	4770      	bx	lr
   d6096:	bf00      	nop
   d6098:	2003e79c 	.word	0x2003e79c
   d609c:	2003e798 	.word	0x2003e798
   d60a0:	2003e794 	.word	0x2003e794
   d60a4:	2003e790 	.word	0x2003e790
   d60a8:	2003e78c 	.word	0x2003e78c
   d60ac:	2003e788 	.word	0x2003e788
   d60b0:	2003e784 	.word	0x2003e784
   d60b4:	2003e780 	.word	0x2003e780
   d60b8:	2003e77c 	.word	0x2003e77c
   d60bc:	2003e778 	.word	0x2003e778
   d60c0:	2003e774 	.word	0x2003e774
   d60c4:	2003e770 	.word	0x2003e770

000d60c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d60c8:	4b24      	ldr	r3, [pc, #144]	; (d615c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d60ca:	681a      	ldr	r2, [r3, #0]
   d60cc:	07d0      	lsls	r0, r2, #31
   d60ce:	bf5c      	itt	pl
   d60d0:	2201      	movpl	r2, #1
   d60d2:	601a      	strpl	r2, [r3, #0]
   d60d4:	4b22      	ldr	r3, [pc, #136]	; (d6160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d60d6:	681a      	ldr	r2, [r3, #0]
   d60d8:	07d1      	lsls	r1, r2, #31
   d60da:	bf5c      	itt	pl
   d60dc:	2201      	movpl	r2, #1
   d60de:	601a      	strpl	r2, [r3, #0]
   d60e0:	4b20      	ldr	r3, [pc, #128]	; (d6164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d60e2:	681a      	ldr	r2, [r3, #0]
   d60e4:	07d2      	lsls	r2, r2, #31
   d60e6:	bf5c      	itt	pl
   d60e8:	2201      	movpl	r2, #1
   d60ea:	601a      	strpl	r2, [r3, #0]
   d60ec:	4b1e      	ldr	r3, [pc, #120]	; (d6168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d60ee:	681a      	ldr	r2, [r3, #0]
   d60f0:	07d0      	lsls	r0, r2, #31
   d60f2:	bf5c      	itt	pl
   d60f4:	2201      	movpl	r2, #1
   d60f6:	601a      	strpl	r2, [r3, #0]
   d60f8:	4b1c      	ldr	r3, [pc, #112]	; (d616c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d60fa:	681a      	ldr	r2, [r3, #0]
   d60fc:	07d1      	lsls	r1, r2, #31
   d60fe:	bf5c      	itt	pl
   d6100:	2201      	movpl	r2, #1
   d6102:	601a      	strpl	r2, [r3, #0]
   d6104:	4b1a      	ldr	r3, [pc, #104]	; (d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d2      	lsls	r2, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4b18      	ldr	r3, [pc, #96]	; (d6174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6112:	681a      	ldr	r2, [r3, #0]
   d6114:	07d0      	lsls	r0, r2, #31
   d6116:	bf5c      	itt	pl
   d6118:	2201      	movpl	r2, #1
   d611a:	601a      	strpl	r2, [r3, #0]
   d611c:	4b16      	ldr	r3, [pc, #88]	; (d6178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d611e:	681a      	ldr	r2, [r3, #0]
   d6120:	07d1      	lsls	r1, r2, #31
   d6122:	bf5c      	itt	pl
   d6124:	2201      	movpl	r2, #1
   d6126:	601a      	strpl	r2, [r3, #0]
   d6128:	4b14      	ldr	r3, [pc, #80]	; (d617c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d612a:	681a      	ldr	r2, [r3, #0]
   d612c:	07d2      	lsls	r2, r2, #31
   d612e:	bf5c      	itt	pl
   d6130:	2201      	movpl	r2, #1
   d6132:	601a      	strpl	r2, [r3, #0]
   d6134:	4b12      	ldr	r3, [pc, #72]	; (d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6136:	681a      	ldr	r2, [r3, #0]
   d6138:	07d0      	lsls	r0, r2, #31
   d613a:	bf5c      	itt	pl
   d613c:	2201      	movpl	r2, #1
   d613e:	601a      	strpl	r2, [r3, #0]
   d6140:	4b10      	ldr	r3, [pc, #64]	; (d6184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6142:	681a      	ldr	r2, [r3, #0]
   d6144:	07d1      	lsls	r1, r2, #31
   d6146:	bf5c      	itt	pl
   d6148:	2201      	movpl	r2, #1
   d614a:	601a      	strpl	r2, [r3, #0]
   d614c:	4b0e      	ldr	r3, [pc, #56]	; (d6188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d614e:	681a      	ldr	r2, [r3, #0]
   d6150:	07d2      	lsls	r2, r2, #31
   d6152:	bf5c      	itt	pl
   d6154:	2201      	movpl	r2, #1
   d6156:	601a      	strpl	r2, [r3, #0]
   d6158:	4770      	bx	lr
   d615a:	bf00      	nop
   d615c:	2003e7cc 	.word	0x2003e7cc
   d6160:	2003e7c8 	.word	0x2003e7c8
   d6164:	2003e7c4 	.word	0x2003e7c4
   d6168:	2003e7c0 	.word	0x2003e7c0
   d616c:	2003e7bc 	.word	0x2003e7bc
   d6170:	2003e7b8 	.word	0x2003e7b8
   d6174:	2003e7b4 	.word	0x2003e7b4
   d6178:	2003e7b0 	.word	0x2003e7b0
   d617c:	2003e7ac 	.word	0x2003e7ac
   d6180:	2003e7a8 	.word	0x2003e7a8
   d6184:	2003e7a4 	.word	0x2003e7a4
   d6188:	2003e7a0 	.word	0x2003e7a0

000d618c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d618c:	4b18      	ldr	r3, [pc, #96]	; (d61f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d618e:	681a      	ldr	r2, [r3, #0]
   d6190:	07d1      	lsls	r1, r2, #31
   d6192:	bf5c      	itt	pl
   d6194:	2201      	movpl	r2, #1
   d6196:	601a      	strpl	r2, [r3, #0]
   d6198:	4b16      	ldr	r3, [pc, #88]	; (d61f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d2      	lsls	r2, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b14      	ldr	r3, [pc, #80]	; (d61f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d0      	lsls	r0, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4b12      	ldr	r3, [pc, #72]	; (d61fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d1      	lsls	r1, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b10      	ldr	r3, [pc, #64]	; (d6200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d2      	lsls	r2, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b0e      	ldr	r3, [pc, #56]	; (d6204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d0      	lsls	r0, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4b0c      	ldr	r3, [pc, #48]	; (d6208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d1      	lsls	r1, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4b0a      	ldr	r3, [pc, #40]	; (d620c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d2      	lsls	r2, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4770      	bx	lr
   d61ee:	bf00      	nop
   d61f0:	2003e7ec 	.word	0x2003e7ec
   d61f4:	2003e7e8 	.word	0x2003e7e8
   d61f8:	2003e7e4 	.word	0x2003e7e4
   d61fc:	2003e7e0 	.word	0x2003e7e0
   d6200:	2003e7dc 	.word	0x2003e7dc
   d6204:	2003e7d8 	.word	0x2003e7d8
   d6208:	2003e7d4 	.word	0x2003e7d4
   d620c:	2003e7d0 	.word	0x2003e7d0

000d6210 <__cxa_atexit>:
   d6210:	b510      	push	{r4, lr}
   d6212:	4c05      	ldr	r4, [pc, #20]	; (d6228 <__cxa_atexit+0x18>)
   d6214:	4613      	mov	r3, r2
   d6216:	b12c      	cbz	r4, d6224 <__cxa_atexit+0x14>
   d6218:	460a      	mov	r2, r1
   d621a:	4601      	mov	r1, r0
   d621c:	2002      	movs	r0, #2
   d621e:	f3af 8000 	nop.w
   d6222:	bd10      	pop	{r4, pc}
   d6224:	4620      	mov	r0, r4
   d6226:	bd10      	pop	{r4, pc}
   d6228:	00000000 	.word	0x00000000

000d622c <memcpy>:
   d622c:	b510      	push	{r4, lr}
   d622e:	1e43      	subs	r3, r0, #1
   d6230:	440a      	add	r2, r1
   d6232:	4291      	cmp	r1, r2
   d6234:	d004      	beq.n	d6240 <memcpy+0x14>
   d6236:	f811 4b01 	ldrb.w	r4, [r1], #1
   d623a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d623e:	e7f8      	b.n	d6232 <memcpy+0x6>
   d6240:	bd10      	pop	{r4, pc}

000d6242 <memset>:
   d6242:	4402      	add	r2, r0
   d6244:	4603      	mov	r3, r0
   d6246:	4293      	cmp	r3, r2
   d6248:	d002      	beq.n	d6250 <memset+0xe>
   d624a:	f803 1b01 	strb.w	r1, [r3], #1
   d624e:	e7fa      	b.n	d6246 <memset+0x4>
   d6250:	4770      	bx	lr
	...

000d6254 <srand>:
   d6254:	b538      	push	{r3, r4, r5, lr}
   d6256:	4b12      	ldr	r3, [pc, #72]	; (d62a0 <srand+0x4c>)
   d6258:	681c      	ldr	r4, [r3, #0]
   d625a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d625c:	4605      	mov	r5, r0
   d625e:	b9d3      	cbnz	r3, d6296 <srand+0x42>
   d6260:	2018      	movs	r0, #24
   d6262:	f7fe fb15 	bl	d4890 <malloc>
   d6266:	f243 330e 	movw	r3, #13070	; 0x330e
   d626a:	63a0      	str	r0, [r4, #56]	; 0x38
   d626c:	8003      	strh	r3, [r0, #0]
   d626e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6272:	8043      	strh	r3, [r0, #2]
   d6274:	f241 2334 	movw	r3, #4660	; 0x1234
   d6278:	8083      	strh	r3, [r0, #4]
   d627a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d627e:	80c3      	strh	r3, [r0, #6]
   d6280:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6284:	8103      	strh	r3, [r0, #8]
   d6286:	2305      	movs	r3, #5
   d6288:	8143      	strh	r3, [r0, #10]
   d628a:	230b      	movs	r3, #11
   d628c:	8183      	strh	r3, [r0, #12]
   d628e:	2201      	movs	r2, #1
   d6290:	2300      	movs	r3, #0
   d6292:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6298:	2200      	movs	r2, #0
   d629a:	611d      	str	r5, [r3, #16]
   d629c:	615a      	str	r2, [r3, #20]
   d629e:	bd38      	pop	{r3, r4, r5, pc}
   d62a0:	20035bd4 	.word	0x20035bd4

000d62a4 <strlen>:
   d62a4:	4603      	mov	r3, r0
   d62a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d62aa:	2a00      	cmp	r2, #0
   d62ac:	d1fb      	bne.n	d62a6 <strlen+0x2>
   d62ae:	1a18      	subs	r0, r3, r0
   d62b0:	3801      	subs	r0, #1
   d62b2:	4770      	bx	lr

000d62b4 <dynalib_user>:
   d62b4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d62c4:	0000 0000 4455 2050 6150 6b63 7465 5320     ....UDP Packet S
   d62d4:	7a69 3a65 2520 0069 7245 6f72 2072 6877     ize: %i.Error wh
   d62e4:	6c69 2065 6572 6461 6e69 2067 4455 2050     ile reading UDP 
   d62f4:	6170 6b63 7465 002e 4c43 4549 544e 5320     packet..CLIENT S
   d6304:	4154 4554 203a 6e45 6574 6972 676e 4420     TATE: Entering D
   d6314:	5349 4f43 4556 4952 474e 7320 6174 6574     ISCOVERING state
   d6324:	002e 4c43 4549 544e 5320 4154 4554 203a     ..CLIENT STATE: 
   d6334:	6e45 6574 6972 676e 4320 4e4f 454e 5443     Entering CONNECT
   d6344:	4e49 2047 7473 7461 2e65 4300 494c 4e45     ING state..CLIEN
   d6354:	2054 5453 5441 3a45 4520 746e 7265 6e69     T STATE: Enterin
   d6364:	2067 4f43 4e4e 4345 4554 2044 7473 7461     g CONNECTED stat
   d6374:	2e65 5300 6e65 6964 676e 6420 7369 6f63     e..Sending disco
   d6384:	6576 7972 7020 6361 656b 2e74 5200 5145     very packet..REQ
   d6394:	4100 7474 6d65 7470 6e69 2067 4354 2050     .Attempting TCP 
   d63a4:	6f63 6e6e 6365 6974 6e6f 7720 7469 2068     connection with 
   d63b4:	6573 7672 7265 2e2e 002e 4354 2050 6f73     server....TCP so
   d63c4:	6b63 7465 6920 2073 706f 6e65 202c 6f63     cket is open, co
   d63d4:	6e6e 6365 6574 2064 6f74 7320 7265 6576     nnected to serve
   d63e4:	2e72 4600 6961 656c 2064 6f74 6320 6e6f     r..Failed to con
   d63f4:	656e 7463 2f20 6f20 6570 206e 4354 2050     nect / open TCP 
   d6404:	6f73 6b63 7465 002e 6552 6964 6373 766f     socket..Rediscov
   d6414:	7265 6e69 2067 6573 7672 7265 2e2e 002e     ering server....
   d6424:	4354 2050 6f53 6b63 7465 6920 2073 6964     TCP Socket is di
   d6434:	6373 6e6f 656e 7463 6465 202c 6572 6964     sconnected, redi
   d6444:	6373 766f 7265 6e69 2067 6573 7672 7265     scovering server
   d6454:	2e2e 002e 7641 7265 6761 2065 696d 7263     ....Average micr
   d6464:	736f 6365 2073 6562 7774 6565 206e 6c73     osecs between sl
   d6474:	7661 2065 6573 6972 6c61 7720 6972 6574     ave serial write
   d6484:	3a73 2520 0069 6576 7463 726f 3a3a 4d5f     s: %i.vector::_M
   d6494:	655f 706d 616c 6563 625f 6361 5f6b 7561     _emplace_back_au
   d64a4:	0078 4455 2050 6150 6b63 7465 7220 6365     x.UDP Packet rec
   d64b4:	6965 6576 2e64 2e2e 4600 756f 646e 7020     eived....Found p
   d64c4:	6361 656b 2074 6568 6461 7265 203a 4100     acket header: .A
   d64d4:	4b43 4400 7369 6f63 6576 7972 6120 6b63     CK.Discovery ack
   d64e4:	6f6e 6c77 6765 656d 746e 7020 6361 656b     nowlegment packe
   d64f4:	2074 6f66 6e75 2c64 7220 6165 6964 676e     t found, reading
   d6504:	7020 6361 656b 2074 6e69 6f66 002e 6f50      packet info..Po
   d6514:	726f 796c 6620 726f 656d 2064 6461 7264     orly formed addr
   d6524:	7365 2073 6e69 6420 7369 6f63 6576 7972     ess in discovery
   d6534:	4120 4b43 7020 6361 656b 2e74 5000 6f6f      ACK packet..Poo
   d6544:	6c72 2079 6f66 6d72 6465 7020 726f 2074     rly formed port 
   d6554:	6e69 6420 7369 6f63 6576 7972 4120 4b43     in discovery ACK
   d6564:	7020 6361 656b 2e74 4400 7369 6f63 6576      packet..Discove
   d6574:	6572 2064 202d 6553 7672 7265 4920 3a50     red - Server IP:
   d6584:	0020 202c 6f70 7472 203a 5000 6f6f 6c72      ., port: .Poorl
   d6594:	2079 6f66 6d72 6465 7320 7265 6576 2072     y formed server 
   d65a4:	6f70 7472 6920 206e 6964 6373 766f 7265     port in discover
   d65b4:	2079 4341 204b 6170 6b63 7465 002e 6944     y ACK packet..Di
   d65c4:	6373 766f 7265 2079 6170 6b63 7465 6120     scovery packet a
   d65d4:	6464 6572 7373 702f 726f 2074 696d 6d73     ddress/port mism
   d65e4:	7461 6863 002e 6944 6373 766f 7265 2079     atch..Discovery 
   d65f4:	6170 6b63 7465 6420 6469 6e20 746f 6820     packet did not h
   d6604:	7661 2065 4341 204b 6568 6461 7265 002e     ave ACK header..
   d6614:	6157 7469 6e69 2067 6f74 6220 2065 6964     Waiting to be di
   d6624:	6373 766f 7265 6465 2e2e 002e 6f50 726f     scovered....Poor
   d6634:	796c 6620 726f 656d 2064 6964 6373 766f     ly formed discov
   d6644:	7265 2079 4341 204b 6170 6b63 7465 002e     ery ACK packet..
   d6654:	6150 6b63 7465 7220 6365 6569 6576 2064     Packet recieved 
   d6664:	6e6f 6d20 7361 6574 2e72 0000               on master...

000d6670 <_ZTVN5spark13EthernetClassE>:
	...
   d6678:	492f 000d 4925 000d 491b 000d 4911 000d     /I..%I...I...I..
   d6688:	4905 000d 48f9 000d 48ed 000d 48e5 000d     .I...H...H...H..
   d6698:	48db 000d 48d1 000d 5e91 000d               .H...H...^..

000d66a4 <_ZTV3UDP>:
	...
   d66ac:	4fe5 000d 5009 000d 49c1 000d 4aeb 000d     .O...P...I...J..
   d66bc:	49b9 000d 49d7 000d 49f5 000d 4a0f 000d     .I...I...I...J..
   d66cc:	4a33 000d 4acf 000d 4dd1 000d 4b71 000d     3J...J...M..qK..
   d66dc:	4cf1 000d 49a1 000d 4f79 000d 4c75 000d     .L...I..yO..uL..
   d66ec:	4ba9 000d 4fa7 000d 4b15 000d 49af 000d     .K...O...K...I..
   d66fc:	4b51 000d 49b5 000d 4a11 000d fff0 ffff     QK...I...J......
   d670c:	0000 0000 4a2b 000d 6162 6475 5300 7265     ....+J..baud.Ser
   d671c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d672c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d673c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d674c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d675c:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d676c:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d677c:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d678c:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d679c:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   d67ac:	6c69 2073 203d 0d00 000a 0066 6e6c 6600     ils = ....f.ln.f
   d67bc:	006e 6f63 6564 6400 7465 6961 006c 6f6e     n.code.detail.no
   d67cc:	656e 7400 6172 6563 6900 666e 006f 6177     ne.trace.info.wa
   d67dc:	6e72 6500 7272 726f 7000 6e61 6369 6100     rn.error.panic.a
   d67ec:	6c6c 5a00 2500 302b 6433 253a 3230 0075     ll.Z.%+03d:%02u.
   d67fc:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d680c:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d6818 <_ZTV9IPAddress>:
	...
   d6820:	5329 000d 5319 000d 531b 000d               )S...S...S..

000d682c <_ZTV9USBSerial>:
	...
   d6834:	5447 000d 5497 000d 54a5 000d 506d 000d     GT...T...T..mP..
   d6844:	5483 000d 5449 000d 545f 000d 5491 000d     .T..IT.._T...T..
   d6854:	5475 000d 5443 000d                         uT..CT..

000d685c <_ZTV11USARTSerial>:
	...
   d6864:	5555 000d 55a5 000d 55b3 000d 506d 000d     UU...U...U..mP..
   d6874:	5569 000d 558b 000d 5577 000d 559f 000d     iU...U..wU...U..
   d6884:	5557 000d 555b 000d                         WU..[U..

000d688c <_ZTVN5spark9MeshClassE>:
	...
   d6894:	56f3 000d 56e9 000d 56df 000d 56d5 000d     .V...V...V...V..
   d68a4:	56c9 000d 56bd 000d 56b1 000d 56a9 000d     .V...V...V...V..
   d68b4:	569f 000d 5695 000d 5e91 000d               .V...V...^..

000d68c0 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d68c8:	5899 000d 589f 000d 5d93 000d 58ad 000d     .X...X...]...X..
   d68d8:	589b 000d                                   .X..

000d68dc <_ZTV9TCPClient>:
	...
   d68e4:	40ed 000d 4121 000d 5811 000d 582b 000d     .@..!A...X..+X..
   d68f4:	5c35 000d 5983 000d 5955 000d 5855 000d     5\...Y..UY..UX..
   d6904:	5b0d 000d 5a09 000d 59b7 000d 5c03 000d     .[...Z...Y...\..
   d6914:	5857 000d 588f 000d 583d 000d 58b1 000d     WX...X..=X...X..
   d6924:	5931 000d 6977 6972 676e 7200 6365 2076     1Y..wiring.recv 
   d6934:	7265 6f72 2072 203d 6425 0000               error = %d..

000d6940 <_ZTVN5spark9WiFiClassE>:
	...
   d6948:	5e09 000d 5dff 000d 5df5 000d 5dab 000d     .^...]...]...]..
   d6958:	5de9 000d 5ddd 000d 5dd1 000d 5dc9 000d     .]...]...]...]..
   d6968:	5dbf 000d 5db5 000d 5e91 000d               .]...]...^..

000d6974 <_ZTVN5spark12NetworkClassE>:
	...
   d697c:	5e29 000d 5e33 000d 5e3d 000d 5e47 000d     )^..3^..=^..G^..
   d698c:	5e51 000d 5e5d 000d 5e69 000d 5e75 000d     Q^..]^..i^..u^..
   d699c:	5e7d 000d 5e87 000d 5e91 000d               }^...^...^..

000d69a8 <__sf_fake_stdin>:
	...

000d69c8 <__sf_fake_stdout>:
	...

000d69e8 <__sf_fake_stderr>:
	...
   d6a08:	0043                                        C.

000d6a0a <link_const_variable_data_end>:
	...

000d6a0c <link_constructors_location>:
   d6a0c:	000d4249 	.word	0x000d4249
   d6a10:	000d4459 	.word	0x000d4459
   d6a14:	000d4939 	.word	0x000d4939
   d6a18:	000d496d 	.word	0x000d496d
   d6a1c:	000d5045 	.word	0x000d5045
   d6a20:	000d51a9 	.word	0x000d51a9
   d6a24:	000d51b9 	.word	0x000d51b9
   d6a28:	000d51ed 	.word	0x000d51ed
   d6a2c:	000d57c1 	.word	0x000d57c1
   d6a30:	000d5e15 	.word	0x000d5e15
   d6a34:	000d5f5d 	.word	0x000d5f5d
   d6a38:	000d5f81 	.word	0x000d5f81
   d6a3c:	000d6005 	.word	0x000d6005
   d6a40:	000d60c9 	.word	0x000d60c9
   d6a44:	000d618d 	.word	0x000d618d

000d6a48 <link_constructors_end>:
	...
